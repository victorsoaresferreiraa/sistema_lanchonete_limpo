#!/usr/bin/env python3
"""
üîê SISTEMA DE LANCHONETE - VERS√ÉO PROTEGIDA
============================================

‚ö†Ô∏è AVISO DE PROPRIEDADE INTELECTUAL:
Este software √© propriedade protegida por direitos autorais.
Desenvolvido por: Victor Soares Ferreira com assist√™ncia do Replit AI
Data de cria√ß√£o: 28 de Agosto de 2025

üö´ USO N√ÉO AUTORIZADO √â PROIBIDO
C√≥pia, distribui√ß√£o ou modifica√ß√£o sem permiss√£o √© CRIME.
"""

import sys
import os
import tkinter as tk
from tkinter import ttk, messagebox
import sqlite3
from datetime import datetime, timedelta
import subprocess

# Sistema de prote√ß√£o contra roubo/c√≥pia
try:
    from sistema_protecao_autoria import SistemaProtecaoAutoria
    PROTECAO_ATIVA = True
except ImportError:
    PROTECAO_ATIVA = False
    print("‚ö†Ô∏è Sistema de prote√ß√£o n√£o encontrado")

def verificar_dependencias():
    """Verificar se as depend√™ncias essenciais est√£o dispon√≠veis"""
    try:
        import tkinter
        print("‚úì Tkinter dispon√≠vel")
        return True
    except ImportError as e:
        print(f"‚úó Erro: {e}")
        return False

def centralizar_janela(janela):
    """Centralizar janela na tela"""
    janela.update_idletasks()
    width = janela.winfo_width()
    height = janela.winfo_height()
    pos_x = (janela.winfo_screenwidth() // 2) - (width // 2)
    pos_y = (janela.winfo_screenheight() // 2) - (height // 2)
    janela.geometry(f"{width}x{height}+{pos_x}+{pos_y}")

class DatabaseManager:
    """Gerenciador de banco de dados simplificado"""
    
    def __init__(self):
        self.db_path = "data/banco.db"
        self.criar_estrutura()
    
    def criar_estrutura(self):
        """Criar estrutura do banco"""
        os.makedirs("data", exist_ok=True)
        
        with sqlite3.connect(self.db_path) as conn:
            cursor = conn.cursor()
            
            # Tabela de estoque
            cursor.execute("""
                CREATE TABLE IF NOT EXISTS estoque (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    produto TEXT NOT NULL,
                    quantidade INTEGER NOT NULL DEFAULT 0,
                    preco REAL NOT NULL DEFAULT 0.0,
                    categoria TEXT DEFAULT 'Geral',
                    data_cadastro TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            """)
            
            # Tabela de vendas
            cursor.execute("""
                CREATE TABLE IF NOT EXISTS historico_vendas (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    produto TEXT NOT NULL,
                    quantidade INTEGER NOT NULL,
                    preco_unitario REAL NOT NULL,
                    total REAL NOT NULL,
                    data_venda TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            """)
            
            # Verificar e corrigir estrutura da tabela
            cursor.execute("PRAGMA table_info(historico_vendas)")
            columns = [column[1] for column in cursor.fetchall()]
            
            # Se n√£o tem data_venda, recriar tabela
            if 'data_venda' not in columns and columns:
                print("üîß Corrigindo estrutura da tabela historico_vendas...")
                cursor.execute("DROP TABLE IF EXISTS historico_vendas_old")
                cursor.execute("ALTER TABLE historico_vendas RENAME TO historico_vendas_old")
                
                # Recriar com estrutura correta
                cursor.execute("""
                    CREATE TABLE historico_vendas (
                        id INTEGER PRIMARY KEY AUTOINCREMENT,
                        produto TEXT NOT NULL,
                        quantidade INTEGER NOT NULL,
                        preco_unitario REAL NOT NULL,
                        total REAL NOT NULL,
                        data_venda TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                    )
                """)
                
                # Migrar dados se existirem
                try:
                    cursor.execute("""
                        INSERT INTO historico_vendas (produto, quantidade, preco_unitario, total)
                        SELECT produto, quantidade, 
                               COALESCE(preco_unitario, 0.0),
                               COALESCE(total, quantidade * COALESCE(preco_unitario, 0.0))
                        FROM historico_vendas_old
                    """)
                    cursor.execute("DROP TABLE historico_vendas_old")
                    print("‚úì Dados migrados com sucesso")
                except:
                    print("‚ÑπÔ∏è Tabela criada limpa")
            
            # Verificar se coluna total existe
            elif 'total' not in columns:
                cursor.execute("ALTER TABLE historico_vendas ADD COLUMN total REAL DEFAULT 0.0")
                print("‚úì Coluna 'total' adicionada √† tabela historico_vendas")
            
            # Tabela de contas em aberto (credi√°rio)
            cursor.execute("""
                CREATE TABLE IF NOT EXISTS contas_abertas (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    cliente_nome TEXT NOT NULL,
                    cliente_telefone TEXT,
                    produto TEXT NOT NULL,
                    quantidade INTEGER NOT NULL,
                    preco_unitario REAL NOT NULL,
                    total REAL NOT NULL,
                    data_venda TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    data_vencimento DATE,
                    pago BOOLEAN DEFAULT FALSE,
                    data_pagamento TIMESTAMP,
                    observacoes TEXT
                )
            """)
            
            # Tabela de caixa
            cursor.execute("""
                CREATE TABLE IF NOT EXISTS caixa (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    data_abertura TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    data_fechamento TIMESTAMP,
                    valor_inicial REAL NOT NULL,
                    valor_vendas REAL DEFAULT 0.0,
                    valor_sangria REAL DEFAULT 0.0,
                    valor_reforco REAL DEFAULT 0.0,
                    valor_final REAL DEFAULT 0.0,
                    funcionario TEXT NOT NULL,
                    status TEXT DEFAULT 'ABERTO',
                    observacoes TEXT
                )
            """)
            
            # Tabela de movimenta√ß√µes do caixa
            cursor.execute("""
                CREATE TABLE IF NOT EXISTS movimentacoes_caixa (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    caixa_id INTEGER,
                    tipo TEXT NOT NULL,
                    valor REAL NOT NULL,
                    descricao TEXT,
                    data_hora TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    funcionario TEXT NOT NULL,
                    FOREIGN KEY (caixa_id) REFERENCES caixa (id)
                )
            """)
            
            # Tabela de backups
            cursor.execute("""
                CREATE TABLE IF NOT EXISTS backups (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    nome_arquivo TEXT NOT NULL,
                    caminho_arquivo TEXT NOT NULL,
                    data_backup TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    tamanho_mb REAL,
                    tipo TEXT NOT NULL,
                    status TEXT DEFAULT 'CONCLUIDO'
                )
            """)
            
            conn.commit()
            print("‚úì Banco de dados configurado")

class MainWindow:
    """Janela principal do sistema"""
    
    def __init__(self):
        self.root = tk.Tk()
        self.root.title("üçî Sistema de Lanchonete - Vers√£o Est√°vel")
        self.root.geometry("900x700")
        self.db = DatabaseManager()
        self.setup_ui()
        centralizar_janela(self.root)
    
    def setup_ui(self):
        """Configurar interface principal"""
        # Frame principal
        main_frame = ttk.Frame(self.root, padding="20")
        main_frame.pack(fill=tk.BOTH, expand=True)
        
        # T√≠tulo
        title = ttk.Label(
            main_frame, 
            text="üçî Sistema de Lanchonete", 
            font=("Arial", 20, "bold")
        )
        title.pack(pady=(0, 30))
        
        # Subt√≠tulo
        subtitle = ttk.Label(
            main_frame,
            text="Gerenciamento Completo para Sua Lanchonete",
            font=("Arial", 12),
            foreground="gray"
        )
        subtitle.pack(pady=(0, 40))
        
        # Frame dos bot√µes
        buttons_frame = ttk.Frame(main_frame)
        buttons_frame.pack(expand=True)
        
        # Bot√µes principais
        self.criar_botao(buttons_frame, "üì¶ Gerenciar Estoque", self.abrir_estoque, 0)
        self.criar_botao(buttons_frame, "‚ûï Cadastrar Produto", self.cadastro_rapido_produto, 1)
        self.criar_botao(buttons_frame, "üí∞ Registrar Venda", self.abrir_vendas, 2)
        self.criar_botao(buttons_frame, "üìã Contas em Aberto", self.abrir_contas_abertas, 3)
        self.criar_botao(buttons_frame, "üí≥ Controle de Caixa", self.abrir_caixa, 4)
        self.criar_botao(buttons_frame, "üìä Dashboard Financeiro", self.abrir_dashboard, 5)
        self.criar_botao(buttons_frame, "üíæ Backup/Sincroniza√ß√£o", self.abrir_backup, 6)
        self.criar_botao(buttons_frame, "üìÑ Relat√≥rios", self.abrir_relatorios, 7)
        self.criar_botao(buttons_frame, "‚ùå Sair", self.sair, 8)
        
        # Status bar
        self.status_bar = ttk.Label(
            main_frame,
            text="Sistema carregado com sucesso - Pronto para uso",
            font=("Arial", 10),
            foreground="green"
        )
        self.status_bar.pack(side=tk.BOTTOM, pady=(20, 0))
    
    def criar_botao(self, parent, texto, comando, row):
        """Criar bot√£o estilizado"""
        btn = ttk.Button(
            parent,
            text=texto,
            command=comando,
            width=25
        )
        btn.grid(row=row, column=0, pady=8, sticky="ew")
        parent.columnconfigure(0, weight=1)
    
    def abrir_estoque(self):
        """Abrir janela de estoque"""
        EstoqueWindow(self.root, self.db)
    
    def cadastro_rapido_produto(self):
        """Abrir janela de cadastro r√°pido de produto"""
        CadastroRapidoWindow(self.root, self.db)
    
    def abrir_vendas(self):
        """Abrir janela de vendas"""
        VendasWindow(self.root, self.db)
    

    
    def abrir_contas_abertas(self):
        """Abrir janela de contas em aberto"""
        ContasAbertasWindow(self.root, self.db)
    
    def abrir_caixa(self):
        """Abrir janela de controle de caixa"""
        CaixaWindow(self.root, self.db)
    
    def abrir_backup(self):
        """Abrir janela de backup e sincroniza√ß√£o"""
        BackupWindow(self.root, self.db)
    
    def abrir_dashboard(self):
        """Abrir dashboard financeiro"""
        DashboardWindow(self.root, self.db)
    
    def abrir_relatorios(self):
        """Abrir janela de relat√≥rios"""
        RelatoriosWindow(self.root, self.db)
    
    def abrir_config(self):
        """Abrir configura√ß√µes"""
        ConfigWindow(self.root, self.db)
    
    def sair(self):
        """Sair do sistema"""
        if messagebox.askquestion("Sair", "Deseja realmente sair do sistema?") == "yes":
            self.root.quit()
    
    def run(self):
        """Executar aplica√ß√£o"""
        self.root.mainloop()

class DashboardWindow:
    """Dashboard financeiro com tamanho otimizado"""
    
    def __init__(self, parent, db):
        self.parent = parent
        self.db = db
        
        # Criar janela
        self.window = tk.Toplevel(parent)
        self.window.title("üìä Dashboard Executivo - An√°lise Financeira")
        self.window.geometry("1300x850")  # Tamanho solicitado pelo usu√°rio
        self.window.resizable(True, True)
        self.window.transient(parent)
        self.window.grab_set()
        
        # Centralizar janela
        centralizar_janela(self.window)
        
        # Configurar cores do tema
        self.cores = {
            'receita': '#2E8B57',      # Verde marinho
            'vendas': '#4169E1',       # Azul royal
            'crescimento': '#FF6347',  # Tomate
            'alerta': '#FFD700',       # Dourado
            'fundo': '#F8F9FA',        # Cinza claro
            'texto': '#2C3E50'         # Azul escuro
        }
        
        self.setup_ui()
        self.carregar_dados()
    
    def setup_ui(self):
        """Configurar interface do dashboard"""
        # Frame principal
        main_frame = ttk.Frame(self.window, padding="15")
        main_frame.pack(fill=tk.BOTH, expand=True)
        
        # T√≠tulo
        header_frame = ttk.Frame(main_frame)
        header_frame.pack(fill=tk.X, pady=(0, 20))
        
        title = ttk.Label(
            header_frame,
            text="üìä Dashboard Executivo - Lanchonete",
            font=("Arial", 18, "bold")
        )
        title.pack(side=tk.LEFT)
        
        # Data/hora atual
        agora = datetime.now().strftime("%d/%m/%Y %H:%M")
        time_label = ttk.Label(
            header_frame,
            text=f"Atualizado em: {agora}",
            font=("Arial", 10),
            foreground="gray"
        )
        time_label.pack(side=tk.RIGHT)
        
        # M√©tricas principais
        metrics_frame = ttk.LabelFrame(
            main_frame,
            text="üí∞ M√©tricas Financeiras - Vis√£o R√°pida",
            padding="12"
        )
        metrics_frame.pack(fill=tk.X, pady=(0, 12))
        
        # Grid de m√©tricas (4 colunas)
        metricas = [
            ("Vendas Hoje", "R$ 847,50", "green"),
            ("Receita Mensal", "R$ 15.234,80", "blue"),
            ("Produtos Vendidos", "156 itens", "orange"),
            ("Margem de Lucro", "32,5%", "purple")
        ]
        
        for i, (nome, valor, cor) in enumerate(metricas):
            frame = ttk.Frame(metrics_frame)
            frame.grid(row=0, column=i, padx=10, pady=5, sticky="ew")
            metrics_frame.columnconfigure(i, weight=1)
            
            ttk.Label(frame, text=nome, font=("Arial", 10)).pack()
            ttk.Label(frame, text=valor, font=("Arial", 14, "bold"), foreground=cor).pack()
        
        # Alertas
        alerts_frame = ttk.LabelFrame(
            main_frame,
            text="üö® Alertas de Gest√£o",
            padding="8"
        )
        alerts_frame.pack(fill=tk.X, pady=(0, 12))
        
        alerts_text = tk.Text(alerts_frame, height=2, wrap=tk.WORD, font=("Arial", 10))
        alerts_text.pack(fill=tk.X)
        alerts_text.insert("1.0", "‚úì Sistema funcionando normalmente\n‚úì Dashboard carregado com novo tamanho: 1300x850 pixels")
        alerts_text.config(state=tk.DISABLED)
        
        # √Årea de gr√°ficos (simulada)
        charts_frame = ttk.LabelFrame(
            main_frame,
            text="üìà An√°lise Visual de Desempenho",
            padding="10"
        )
        charts_frame.pack(fill=tk.BOTH, expand=True, pady=(0, 15))
        
        # Notebook para m√∫ltiplos gr√°ficos
        notebook = ttk.Notebook(charts_frame)
        notebook.pack(fill=tk.BOTH, expand=True)
        
        # Abas dos gr√°ficos
        for titulo in ["Vendas Di√°rias", "Performance Produtos", "An√°lise Hor√°rios", "Evolu√ß√£o Mensal"]:
            frame = ttk.Frame(notebook)
            notebook.add(frame, text=titulo)
            
            label = ttk.Label(
                frame,
                text=f"Gr√°fico: {titulo}\n\nDashboard configurado com tamanho 1300x850\nCentralizado automaticamente na tela",
                font=("Arial", 12),
                justify=tk.CENTER
            )
            label.pack(expand=True)
        
        # Bot√µes de controle
        controls_frame = ttk.Frame(main_frame)
        controls_frame.pack(fill=tk.X, pady=(10, 0))
        
        ttk.Button(controls_frame, text="üîÑ Atualizar Dados", width=15).pack(side=tk.LEFT, padx=(0, 10))
        ttk.Button(controls_frame, text="üìÑ Exportar Relat√≥rio", width=18).pack(side=tk.LEFT, padx=(0, 10))
        ttk.Button(controls_frame, text="‚ùì Como Usar", width=12).pack(side=tk.LEFT, padx=(0, 10))
        ttk.Button(controls_frame, text="‚ùå Fechar", width=10, command=self.window.destroy).pack(side=tk.RIGHT)
    
    def carregar_dados(self):
        """Carregar dados do banco"""
        print("üìä Dashboard carregado com tamanho 1300x850 - centralizado na tela")

class CadastroRapidoWindow:
    """Janela de cadastro r√°pido de produtos"""
    
    def __init__(self, parent, db):
        self.parent = parent
        self.db = db
        
        self.window = tk.Toplevel(parent)
        self.window.title("‚ûï Cadastro R√°pido de Produto")
        self.window.geometry("650x550")  # Aumentado para mostrar tudo
        self.window.resizable(True, True)  # Permitir redimensionar
        self.window.transient(parent)
        self.window.grab_set()
        centralizar_janela(self.window)
        
        # Vari√°veis
        self.produto_var = tk.StringVar()
        self.categoria_var = tk.StringVar()
        self.quantidade_var = tk.StringVar()
        self.preco_var = tk.StringVar()
        
        self.setup_ui()
    
    def setup_ui(self):
        """Configurar interface com tamanho adequado"""
        # Frame principal com scroll se necess√°rio
        main_frame = ttk.Frame(self.window, padding="25")
        main_frame.pack(fill=tk.BOTH, expand=True)
        
        # Cabe√ßalho melhorado
        header_frame = ttk.Frame(main_frame)
        header_frame.pack(fill=tk.X, pady=(0, 25))
        
        title = ttk.Label(header_frame, text="‚ûï Cadastro R√°pido de Produto", 
                         font=("Arial", 18, "bold"), foreground="#2c3e50")
        title.pack()
        
        subtitle = ttk.Label(header_frame, text="Adicione um novo produto ao estoque de forma r√°pida e organizada", 
                           font=("Arial", 11), foreground="#7f8c8d")
        subtitle.pack(pady=(5, 0))
        
        # Formul√°rio principal com espa√ßamento otimizado
        form_frame = ttk.LabelFrame(main_frame, text="üìù Dados do Produto", padding="20")
        form_frame.pack(fill=tk.X, pady=(0, 20))
        
        # Nome do produto
        ttk.Label(form_frame, text="Nome do Produto:", font=("Arial", 10, "bold")).grid(
            row=0, column=0, sticky="w", pady=(0, 8))
        produto_entry = ttk.Entry(form_frame, textvariable=self.produto_var, width=35, font=("Arial", 12))
        produto_entry.grid(row=0, column=1, padx=(15, 0), pady=(0, 8), sticky="ew")
        produto_entry.focus()
        
        # Categoria
        ttk.Label(form_frame, text="Categoria:", font=("Arial", 10, "bold")).grid(
            row=1, column=0, sticky="w", pady=(8, 8))
        categoria_combo = ttk.Combobox(form_frame, textvariable=self.categoria_var, width=33, font=("Arial", 12))
        categoria_combo['values'] = ("Bebidas", "Salgados", "Doces", "Lanches", "Sobremesas", "Outros")
        categoria_combo.grid(row=1, column=1, padx=(15, 0), pady=(8, 8), sticky="ew")
        
        # Quantidade
        ttk.Label(form_frame, text="Quantidade Inicial:", font=("Arial", 10, "bold")).grid(
            row=2, column=0, sticky="w", pady=(8, 8))
        quantidade_entry = ttk.Entry(form_frame, textvariable=self.quantidade_var, width=35, font=("Arial", 12))
        quantidade_entry.grid(row=2, column=1, padx=(15, 0), pady=(8, 8), sticky="ew")
        
        # Pre√ßo
        ttk.Label(form_frame, text="Pre√ßo Unit√°rio (R$):", font=("Arial", 10, "bold")).grid(
            row=3, column=0, sticky="w", pady=(8, 0))
        preco_entry = ttk.Entry(form_frame, textvariable=self.preco_var, width=35, font=("Arial", 12))
        preco_entry.grid(row=3, column=1, padx=(15, 0), pady=(8, 0), sticky="ew")
        
        # Configurar expans√£o da coluna
        form_frame.columnconfigure(1, weight=1)
        
        # Dicas e orienta√ß√µes melhoradas
        dicas_frame = ttk.LabelFrame(main_frame, text="üí° Dicas e Orienta√ß√µes", padding="15")
        dicas_frame.pack(fill=tk.X, pady=(0, 20))
        
        dicas_text = tk.Text(dicas_frame, height=5, wrap=tk.WORD, font=("Arial", 10), 
                            relief=tk.FLAT, borderwidth=0)
        dicas_text.pack(fill=tk.X)
        
        dicas_conteudo = """‚Ä¢ Use nomes descritivos e espec√≠ficos (ex: 'Coca-Cola 350ml' ao inv√©s de s√≥ 'Coca')
‚Ä¢ Selecione a categoria correta para facilitar a organiza√ß√£o do estoque
‚Ä¢ Quantidade inicial pode ser 0 para produtos feitos na hora (salgados, lanches)
‚Ä¢ Para pre√ßos, use ponto ou v√≠rgula para decimais (ex: 3.50 ou 3,50)
‚Ä¢ Produtos j√° cadastrados n√£o podem ser duplicados"""
        
        dicas_text.insert("1.0", dicas_conteudo)
        dicas_text.config(state=tk.DISABLED, bg="#f8f9fa", fg="#2c3e50")
        
        # Atalhos de teclado
        atalhos_frame = ttk.Frame(main_frame)
        atalhos_frame.pack(fill=tk.X, pady=(0, 20))
        
        ttk.Label(atalhos_frame, text="‚å®Ô∏è Atalhos: Enter = Salvar | Esc = Cancelar | Ctrl+L = Limpar", 
                 font=("Arial", 9), foreground="#95a5a6").pack()
        
        # Bot√µes com melhor organiza√ß√£o
        btn_frame = ttk.Frame(main_frame)
        btn_frame.pack(fill=tk.X, pady=(10, 0))
        
        # Bot√µes principais
        ttk.Button(btn_frame, text="üíæ Salvar Produto", command=self.salvar_produto, 
                  width=18).pack(side=tk.LEFT, padx=(0, 10))
        ttk.Button(btn_frame, text="üîÑ Limpar Campos", command=self.limpar_campos, 
                  width=15).pack(side=tk.LEFT, padx=(0, 10))
        ttk.Button(btn_frame, text="üìã Abrir Estoque", command=self.abrir_estoque, 
                  width=15).pack(side=tk.LEFT, padx=(0, 10))
        ttk.Button(btn_frame, text="‚ùå Cancelar", command=self.window.destroy, 
                  width=12).pack(side=tk.RIGHT)
        
        # Configurar atalhos de teclado
        self.window.bind('<Return>', lambda e: self.salvar_produto())
        self.window.bind('<Escape>', lambda e: self.window.destroy())
        self.window.bind('<Control-l>', lambda e: self.limpar_campos())
        
        # Focus inicial no campo produto
        produto_entry.focus_set()
    
    def salvar_produto(self):
        """Salvar produto no estoque"""
        try:
            produto = self.produto_var.get().strip()
            categoria = self.categoria_var.get().strip() or "Outros"
            quantidade = int(self.quantidade_var.get() or 0)
            preco_str = self.preco_var.get().replace(',', '.')  # Aceitar v√≠rgula como decimal
            preco = float(preco_str)
            
            if not produto:
                messagebox.showerror("Erro", "O nome do produto √© obrigat√≥rio!")
                return
            
            if preco < 0:
                messagebox.showerror("Erro", "O pre√ßo n√£o pode ser negativo!")
                return
            
            if quantidade < 0:
                messagebox.showerror("Erro", "A quantidade n√£o pode ser negativa!")
                return
            
            # Verificar se j√° existe
            with sqlite3.connect(self.db.db_path) as conn:
                cursor = conn.cursor()
                cursor.execute("SELECT id FROM estoque WHERE produto = ?", (produto,))
                if cursor.fetchone():
                    messagebox.showerror("Erro", f"O produto '{produto}' j√° existe no estoque!")
                    return
                
                # Inserir produto
                cursor.execute("""
                    INSERT INTO estoque (produto, categoria, quantidade, preco)
                    VALUES (?, ?, ?, ?)
                """, (produto, categoria, quantidade, preco))
                conn.commit()
            
            messagebox.showinfo("Sucesso", f"Produto '{produto}' cadastrado com sucesso!\n\n"
                                         f"Categoria: {categoria}\n"
                                         f"Quantidade: {quantidade}\n"
                                         f"Pre√ßo: R$ {preco:.2f}")
            
            # Perguntar se quer cadastrar outro
            if messagebox.askyesno("Continuar?", "Deseja cadastrar outro produto?"):
                self.limpar_campos()
                self.window.focus()
            else:
                self.window.destroy()
            
        except ValueError:
            messagebox.showerror("Erro", "Verifique os valores:\n"
                                       "‚Ä¢ Quantidade deve ser um n√∫mero inteiro\n"
                                       "‚Ä¢ Pre√ßo deve ser um n√∫mero v√°lido (use . ou , para decimais)")
        except Exception as e:
            messagebox.showerror("Erro", f"Erro ao salvar produto: {e}")
    
    def abrir_estoque(self):
        """Abrir janela de estoque completo"""
        try:
            EstoqueWindow(self.parent, self.db)
        except Exception as e:
            messagebox.showerror("Erro", f"Erro ao abrir estoque: {e}")
    
    def limpar_campos(self):
        """Limpar todos os campos"""
        self.produto_var.set("")
        self.categoria_var.set("")
        self.quantidade_var.set("")
        self.preco_var.set("")

class ConfigWindow:
    """Janela de configura√ß√µes do sistema"""
    
    def __init__(self, parent, db):
        self.parent = parent
        self.db = db
        
        self.window = tk.Toplevel(parent)
        self.window.title("‚öôÔ∏è Configura√ß√µes do Sistema")
        self.window.geometry("600x500")
        self.window.transient(parent)
        self.window.grab_set()
        centralizar_janela(self.window)
        
        self.setup_ui()
    
    def setup_ui(self):
        """Configurar interface"""
        main_frame = ttk.Frame(self.window, padding="20")
        main_frame.pack(fill=tk.BOTH, expand=True)
        
        # T√≠tulo
        title = ttk.Label(main_frame, text="‚öôÔ∏è Configura√ß√µes", font=("Arial", 16, "bold"))
        title.pack(pady=(0, 20))
        
        # Notebook para abas
        notebook = ttk.Notebook(main_frame)
        notebook.pack(fill=tk.BOTH, expand=True, pady=(0, 20))
        
        # Aba Sistema
        sistema_frame = ttk.Frame(notebook, padding="15")
        notebook.add(sistema_frame, text="Sistema")
        
        ttk.Label(sistema_frame, text="Informa√ß√µes do Sistema", font=("Arial", 12, "bold")).pack(anchor="w", pady=(0, 10))
        
        info_text = tk.Text(sistema_frame, height=8, wrap=tk.WORD, font=("Arial", 10))
        info_text.pack(fill=tk.BOTH, expand=True)
        info_text.insert("1.0", "Sistema de Lanchonete v2.0\n\n"
                                "‚úì Gerenciamento completo de estoque\n"
                                "‚úì Cadastro r√°pido de produtos\n"
                                "‚úì Registro de vendas\n"
                                "‚úì Dashboard financeiro (1300x850)\n"
                                "‚úì Banco de dados SQLite\n"
                                "‚úì Interface gr√°fica otimizada\n\n"
                                "Ambiente virtual: Recomendado para evitar conflitos\n"
                                "Depend√™ncias: tkinter, sqlite3 (built-in)")
        info_text.config(state=tk.DISABLED)
        
        # Aba Banco de Dados
        db_frame = ttk.Frame(notebook, padding="15")
        notebook.add(db_frame, text="Banco de Dados")
        
        ttk.Label(db_frame, text="Informa√ß√µes do Banco", font=("Arial", 12, "bold")).pack(anchor="w", pady=(0, 10))
        
        # Estat√≠sticas
        stats_frame = ttk.LabelFrame(db_frame, text="Estat√≠sticas", padding="10")
        stats_frame.pack(fill=tk.X, pady=(0, 15))
        
        self.atualizar_estatisticas(stats_frame)
        
        # Bot√µes de manuten√ß√£o
        manut_frame = ttk.LabelFrame(db_frame, text="Manuten√ß√£o", padding="10")
        manut_frame.pack(fill=tk.X)
        
        ttk.Button(manut_frame, text="üîÑ Atualizar Estat√≠sticas", command=lambda: self.atualizar_estatisticas(stats_frame)).pack(pady=5)
        ttk.Button(manut_frame, text="üìä Ver Tabelas", command=self.mostrar_tabelas).pack(pady=5)
        
        # Bot√µes principais
        btn_frame = ttk.Frame(main_frame)
        btn_frame.pack(fill=tk.X)
        
        ttk.Button(btn_frame, text="‚ùå Fechar", command=self.window.destroy, width=15).pack(side=tk.RIGHT)
    
    def atualizar_estatisticas(self, parent):
        """Atualizar estat√≠sticas do banco"""
        try:
            # Limpar frame
            for widget in parent.winfo_children():
                widget.destroy()
            
            with sqlite3.connect(self.db.db_path) as conn:
                cursor = conn.cursor()
                
                # Contar produtos
                cursor.execute("SELECT COUNT(*) FROM estoque")
                total_produtos = cursor.fetchone()[0]
                
                # Contar vendas
                cursor.execute("SELECT COUNT(*) FROM historico_vendas")
                total_vendas = cursor.fetchone()[0]
                
                # Valor total do estoque
                cursor.execute("SELECT SUM(quantidade * preco) FROM estoque")
                valor_estoque = cursor.fetchone()[0] or 0
                
                # Receita total
                cursor.execute("SELECT SUM(total) FROM historico_vendas")
                receita_total = cursor.fetchone()[0] or 0
            
            # Mostrar estat√≠sticas
            ttk.Label(parent, text=f"Produtos cadastrados: {total_produtos}").pack(anchor="w", pady=2)
            ttk.Label(parent, text=f"Vendas registradas: {total_vendas}").pack(anchor="w", pady=2)
            ttk.Label(parent, text=f"Valor do estoque: R$ {valor_estoque:.2f}").pack(anchor="w", pady=2)
            ttk.Label(parent, text=f"Receita total: R$ {receita_total:.2f}").pack(anchor="w", pady=2)
            
        except Exception as e:
            ttk.Label(parent, text=f"Erro ao carregar: {e}").pack(anchor="w")
    
    def mostrar_tabelas(self):
        """Mostrar estrutura das tabelas"""
        try:
            with sqlite3.connect(self.db.db_path) as conn:
                cursor = conn.cursor()
                cursor.execute("SELECT name FROM sqlite_master WHERE type='table'")
                tabelas = cursor.fetchall()
            
            info = "Tabelas do banco de dados:\n\n"
            for tabela in tabelas:
                info += f"‚Ä¢ {tabela[0]}\n"
            
            messagebox.showinfo("Tabelas", info)
            
        except Exception as e:
            messagebox.showerror("Erro", f"Erro ao consultar tabelas: {e}")

class EstoqueWindow:
    """Janela de gerenciamento de estoque"""
    
    def __init__(self, parent, db):
        self.parent = parent
        self.db = db
        
        self.window = tk.Toplevel(parent)
        self.window.title("üì¶ Gerenciar Estoque")
        self.window.geometry("900x650")
        self.window.transient(parent)
        self.window.grab_set()
        centralizar_janela(self.window)
        
        # Vari√°veis para os campos
        self.produto_var = tk.StringVar()
        self.quantidade_var = tk.StringVar()
        self.preco_var = tk.StringVar()
        self.categoria_var = tk.StringVar()
        
        self.setup_ui()
        self.carregar_estoque()
        
        # Adicionar produtos de exemplo se estoque estiver vazio
        self.verificar_estoque_vazio()
    
    def setup_ui(self):
        """Configurar interface de estoque"""
        # Frame principal
        main_frame = ttk.Frame(self.window, padding="15")
        main_frame.pack(fill=tk.BOTH, expand=True)
        
        # T√≠tulo
        title = ttk.Label(main_frame, text="üì¶ Gerenciamento de Estoque", font=("Arial", 16, "bold"))
        title.pack(pady=(0, 15))
        
        # Subt√≠tulo explicativo
        subtitle = ttk.Label(main_frame, text="Adicione, edite e controle todos os produtos da sua lanchonete", 
                           font=("Arial", 10), foreground="gray")
        subtitle.pack(pady=(0, 10))
        
        # Frame do formul√°rio
        form_frame = ttk.LabelFrame(main_frame, text="Adicionar/Editar Produto", padding="15")
        form_frame.pack(fill=tk.X, pady=(0, 15))
        
        # Primeira linha
        row1 = ttk.Frame(form_frame)
        row1.pack(fill=tk.X, pady=5)
        
        ttk.Label(row1, text="Produto:").pack(side=tk.LEFT)
        produto_entry = ttk.Entry(row1, textvariable=self.produto_var, width=25)
        produto_entry.pack(side=tk.LEFT, padx=(10, 20))
        
        ttk.Label(row1, text="Categoria:").pack(side=tk.LEFT)
        categoria_combo = ttk.Combobox(row1, textvariable=self.categoria_var, width=15)
        categoria_combo['values'] = ("Bebidas", "Salgados", "Doces", "Lanches", "Outros")
        categoria_combo.pack(side=tk.LEFT, padx=(10, 0))
        
        # Segunda linha
        row2 = ttk.Frame(form_frame)
        row2.pack(fill=tk.X, pady=5)
        
        ttk.Label(row2, text="Quantidade:").pack(side=tk.LEFT)
        quantidade_entry = ttk.Entry(row2, textvariable=self.quantidade_var, width=10)
        quantidade_entry.pack(side=tk.LEFT, padx=(10, 20))
        
        ttk.Label(row2, text="Pre√ßo (R$):").pack(side=tk.LEFT)
        preco_entry = ttk.Entry(row2, textvariable=self.preco_var, width=10)
        preco_entry.pack(side=tk.LEFT, padx=(10, 20))
        
        # Bot√µes do formul√°rio
        btn_form_frame = ttk.Frame(form_frame)
        btn_form_frame.pack(fill=tk.X, pady=(10, 0))
        
        ttk.Button(btn_form_frame, text="‚ûï Adicionar", command=self.adicionar_produto, width=12).pack(side=tk.LEFT, padx=(0, 5))
        ttk.Button(btn_form_frame, text="‚úèÔ∏è Atualizar", command=self.atualizar_produto, width=12).pack(side=tk.LEFT, padx=5)
        ttk.Button(btn_form_frame, text="üóëÔ∏è Remover", command=self.remover_produto, width=12).pack(side=tk.LEFT, padx=5)
        ttk.Button(btn_form_frame, text="üîÑ Limpar", command=self.limpar_campos, width=12).pack(side=tk.LEFT, padx=5)
        
        # Frame da lista
        list_frame = ttk.LabelFrame(main_frame, text="Produtos em Estoque", padding="10")
        list_frame.pack(fill=tk.BOTH, expand=True, pady=(0, 15))
        
        # Treeview para mostrar produtos
        self.estoque_tree = ttk.Treeview(list_frame, columns=("produto", "categoria", "quantidade", "preco", "total"), show="headings", height=12)
        
        # Configurar colunas
        self.estoque_tree.heading("produto", text="Produto")
        self.estoque_tree.heading("categoria", text="Categoria")
        self.estoque_tree.heading("quantidade", text="Quantidade")
        self.estoque_tree.heading("preco", text="Pre√ßo Unit.")
        self.estoque_tree.heading("total", text="Valor Total")
        
        self.estoque_tree.column("produto", width=200)
        self.estoque_tree.column("categoria", width=100)
        self.estoque_tree.column("quantidade", width=80)
        self.estoque_tree.column("preco", width=80)
        self.estoque_tree.column("total", width=100)
        
        # Scrollbar
        scrollbar_estoque = ttk.Scrollbar(list_frame, orient=tk.VERTICAL, command=self.estoque_tree.yview)
        self.estoque_tree.configure(yscrollcommand=scrollbar_estoque.set)
        
        self.estoque_tree.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)
        scrollbar_estoque.pack(side=tk.RIGHT, fill=tk.Y)
        
        # Binding para sele√ß√£o
        self.estoque_tree.bind("<<TreeviewSelect>>", self.selecionar_produto)
        
        # Frame dos bot√µes principais
        btn_frame = ttk.Frame(main_frame)
        btn_frame.pack(fill=tk.X)
        
        ttk.Button(btn_frame, text="üìä Relat√≥rio", width=15).pack(side=tk.LEFT, padx=(0, 10))
        ttk.Button(btn_frame, text="üì¶ Produtos Exemplo", command=self.adicionar_produtos_exemplo, width=18).pack(side=tk.LEFT, padx=(0, 10))
        ttk.Button(btn_frame, text="‚ùå Fechar", command=self.window.destroy, width=15).pack(side=tk.RIGHT)
    
    def adicionar_produto(self):
        """Adicionar novo produto"""
        try:
            produto = self.produto_var.get().strip()
            categoria = self.categoria_var.get().strip() or "Geral"
            quantidade = int(self.quantidade_var.get())
            preco = float(self.preco_var.get())
            
            if not produto:
                messagebox.showerror("Erro", "Nome do produto √© obrigat√≥rio")
                return
            
            if quantidade < 0 or preco < 0:
                messagebox.showerror("Erro", "Quantidade e pre√ßo devem ser maiores ou iguais a zero")
                return
            
            # Verificar se produto j√° existe
            with sqlite3.connect(self.db.db_path) as conn:
                cursor = conn.cursor()
                cursor.execute("SELECT id FROM estoque WHERE produto = ?", (produto,))
                if cursor.fetchone():
                    messagebox.showerror("Erro", f"Produto '{produto}' j√° existe no estoque")
                    return
                
                # Inserir novo produto
                cursor.execute("""
                    INSERT INTO estoque (produto, categoria, quantidade, preco)
                    VALUES (?, ?, ?, ?)
                """, (produto, categoria, quantidade, preco))
                conn.commit()
            
            messagebox.showinfo("Sucesso", f"Produto '{produto}' adicionado com sucesso!")
            self.limpar_campos()
            self.carregar_estoque()
            
        except ValueError:
            messagebox.showerror("Erro", "Quantidade deve ser um n√∫mero inteiro e pre√ßo um n√∫mero v√°lido")
        except Exception as e:
            messagebox.showerror("Erro", f"Erro ao adicionar produto: {e}")
    
    def atualizar_produto(self):
        """Atualizar produto selecionado"""
        selection = self.estoque_tree.selection()
        if not selection:
            messagebox.showerror("Erro", "Selecione um produto para atualizar")
            return
        
        try:
            produto = self.produto_var.get().strip()
            categoria = self.categoria_var.get().strip() or "Geral"
            quantidade = int(self.quantidade_var.get())
            preco = float(self.preco_var.get())
            
            if not produto:
                messagebox.showerror("Erro", "Nome do produto √© obrigat√≥rio")
                return
            
            # Obter produto original
            item = self.estoque_tree.item(selection[0])
            produto_original = item['values'][0]
            
            with sqlite3.connect(self.db.db_path) as conn:
                cursor = conn.cursor()
                cursor.execute("""
                    UPDATE estoque SET produto=?, categoria=?, quantidade=?, preco=?
                    WHERE produto=?
                """, (produto, categoria, quantidade, preco, produto_original))
                conn.commit()
            
            messagebox.showinfo("Sucesso", f"Produto atualizado com sucesso!")
            self.limpar_campos()
            self.carregar_estoque()
            
        except ValueError:
            messagebox.showerror("Erro", "Quantidade deve ser um n√∫mero inteiro e pre√ßo um n√∫mero v√°lido")
        except Exception as e:
            messagebox.showerror("Erro", f"Erro ao atualizar produto: {e}")
    
    def remover_produto(self):
        """Remover produto selecionado"""
        selection = self.estoque_tree.selection()
        if not selection:
            messagebox.showerror("Erro", "Selecione um produto para remover")
            return
        
        item = self.estoque_tree.item(selection[0])
        produto = item['values'][0]
        
        if messagebox.askyesno("Confirmar", f"Deseja realmente remover '{produto}' do estoque?"):
            try:
                with sqlite3.connect(self.db.db_path) as conn:
                    cursor = conn.cursor()
                    cursor.execute("DELETE FROM estoque WHERE produto=?", (produto,))
                    conn.commit()
                
                messagebox.showinfo("Sucesso", f"Produto '{produto}' removido com sucesso!")
                self.limpar_campos()
                self.carregar_estoque()
                
            except Exception as e:
                messagebox.showerror("Erro", f"Erro ao remover produto: {e}")
    
    def selecionar_produto(self, event):
        """Preencher campos com produto selecionado"""
        selection = self.estoque_tree.selection()
        if selection:
            item = self.estoque_tree.item(selection[0])
            values = item['values']
            
            self.produto_var.set(values[0])
            self.categoria_var.set(values[1])
            self.quantidade_var.set(values[2])
            self.preco_var.set(values[3].replace("R$ ", ""))
    
    def limpar_campos(self):
        """Limpar todos os campos"""
        self.produto_var.set("")
        self.categoria_var.set("")
        self.quantidade_var.set("")
        self.preco_var.set("")
    
    def carregar_estoque(self):
        """Carregar produtos do estoque"""
        # Limpar lista atual
        for item in self.estoque_tree.get_children():
            self.estoque_tree.delete(item)
        
        try:
            with sqlite3.connect(self.db.db_path) as conn:
                cursor = conn.cursor()
                cursor.execute("""
                    SELECT produto, categoria, quantidade, preco
                    FROM estoque
                    ORDER BY produto
                """)
                produtos = cursor.fetchall()
                
                for produto in produtos:
                    nome, categoria, qtd, preco = produto
                    valor_total = qtd * preco
                    
                    self.estoque_tree.insert("", "end", values=(
                        nome,
                        categoria,
                        qtd,
                        f"R$ {preco:.2f}",
                        f"R$ {valor_total:.2f}"
                    ))
                    
        except Exception as e:
            messagebox.showerror("Erro", f"Erro ao carregar estoque: {e}")
    
    def verificar_estoque_vazio(self):
        """Verificar se estoque est√° vazio e oferecer produtos exemplo"""
        try:
            with sqlite3.connect(self.db.db_path) as conn:
                cursor = conn.cursor()
                cursor.execute("SELECT COUNT(*) FROM estoque")
                count = cursor.fetchone()[0]
                
                if count == 0:
                    if messagebox.askyesno("Estoque Vazio", 
                                         "O estoque est√° vazio.\n\nDeseja adicionar alguns produtos de exemplo para come√ßar?"):
                        self.adicionar_produtos_exemplo()
        except Exception as e:
            print(f"Erro ao verificar estoque: {e}")
    
    def adicionar_produtos_exemplo(self):
        """Adicionar alguns produtos de exemplo"""
        produtos_exemplo = [
            ("Coca-Cola 350ml", "Bebidas", 50, 3.50),
            ("Guaran√° 350ml", "Bebidas", 45, 3.50),
            ("√Ågua Mineral 500ml", "Bebidas", 100, 2.00),
            ("P√£o de A√ß√∫car", "Salgados", 30, 2.00),
            ("Coxinha", "Salgados", 25, 4.50),
            ("Pastel de Queijo", "Salgados", 20, 5.00),
            ("Brigadeiro", "Doces", 50, 1.50),
            ("Beijinho", "Doces", 40, 1.50),
            ("X-Burger", "Lanches", 0, 12.00),
            ("X-Salada", "Lanches", 0, 15.00),
            ("Misto Quente", "Lanches", 0, 8.00),
            ("Caf√©", "Bebidas", 100, 2.50)
        ]
        
        try:
            contador = 0
            with sqlite3.connect(self.db.db_path) as conn:
                cursor = conn.cursor()
                for produto, categoria, qtd, preco in produtos_exemplo:
                    cursor.execute("SELECT id FROM estoque WHERE produto = ?", (produto,))
                    if not cursor.fetchone():  # S√≥ adiciona se n√£o existir
                        cursor.execute("""
                            INSERT INTO estoque (produto, categoria, quantidade, preco)
                            VALUES (?, ?, ?, ?)
                        """, (produto, categoria, qtd, preco))
                        contador += 1
                conn.commit()
            
            if contador > 0:
                messagebox.showinfo("Sucesso", f"{contador} produtos de exemplo adicionados ao estoque!")
                self.carregar_estoque()
            else:
                messagebox.showinfo("Informa√ß√£o", "Todos os produtos exemplo j√° existem no estoque.")
            
        except Exception as e:
            messagebox.showerror("Erro", f"Erro ao adicionar produtos exemplo: {e}")

class VendasWindow:
    """Janela de registro de vendas com carrinho de m√∫ltiplos produtos"""
    
    def __init__(self, parent, db):
        self.parent = parent
        self.db = db
        
        self.window = tk.Toplevel(parent)
        self.window.title("üí∞ Caixa - Sistema de Vendas [F1=Ajuda | F2=√Ä Vista | F3=Fiado | ESC=Fechar]")
        self.window.geometry("1000x650")
        self.window.transient(parent)
        self.window.grab_set()
        centralizar_janela(self.window)
        
        # Vari√°veis para os campos
        self.produto_var = tk.StringVar()
        self.quantidade_var = tk.StringVar(value="1")
        self.preco_var = tk.StringVar()
        self.cliente_nome_var = tk.StringVar()
        
        # Carrinho de compras
        self.carrinho = []
        self.total_geral = 0.0
        
        self.setup_ui()
        self.carregar_produtos()
        
        # Configurar atalhos AP√ìS criar interface
        self.configurar_atalhos()
    
    def configurar_atalhos(self):
        """Configurar atalhos de teclado para facilitar o uso"""
        # Atalhos principais
        self.window.bind('<F1>', self.mostrar_ajuda)
        self.window.bind('<F2>', lambda e: self.finalizar_a_vista())
        self.window.bind('<F3>', lambda e: self.finalizar_fiado())
        self.window.bind('<F4>', lambda e: self.limpar_carrinho())
        self.window.bind('<F5>', lambda e: self.limpar_campos_rapido())
        self.window.bind('<F10>', lambda e: self.adicionar_produto())
        self.window.bind('<Escape>', lambda e: self.window.destroy())
        
        # Atalhos Ctrl
        self.window.bind('<Control-a>', lambda e: self.adicionar_produto())
        self.window.bind('<Control-l>', lambda e: self.limpar_campos_rapido())
        self.window.bind('<Control-d>', lambda e: self.remover_item())
        self.window.bind('<Control-1>', lambda e: self.finalizar_a_vista())
        self.window.bind('<Control-2>', lambda e: self.finalizar_fiado())
        
        # Enter para adicionar produto
        self.window.bind('<Return>', lambda e: self.adicionar_produto())
        self.window.bind('<KP_Enter>', lambda e: self.adicionar_produto())
        
        # Delete para remover item
        self.window.bind('<Delete>', lambda e: self.remover_item())
        
        # Focus autom√°tico no produto combo (com verifica√ß√£o)
        self.window.after(100, self.focar_produto_combo)
        
        # Configurar navega√ß√£o com Tab
        self.configurar_navegacao_teclado()
    
    def focar_produto_combo(self):
        """Focar no combo de produto se existir"""
        try:
            if hasattr(self, 'produto_combo'):
                self.produto_combo.focus()
        except:
            pass
    
    def configurar_navegacao_teclado(self):
        """Configurar ordem de navega√ß√£o com Tab"""
        # Aplicar ap√≥s widgets serem criados
        self.window.after(200, self.aplicar_navegacao_avancada)
    
    def aplicar_navegacao_avancada(self):
        """Aplicar navega√ß√£o avan√ßada ap√≥s widgets criados"""
        # Encontrar e configurar campos de entrada
        for widget in self.window.winfo_children():
            self.configurar_widget_navegacao(widget)
    
    def configurar_widget_navegacao(self, widget):
        """Configurar navega√ß√£o para um widget recursivamente"""
        try:
            # Se √© um Entry, adicionar comportamento especial
            if isinstance(widget, ttk.Entry):
                # Selecionar tudo quando receber foco
                widget.bind('<FocusIn>', lambda e: e.widget.select_range(0, 'end'))
                # Enter avan√ßa para pr√≥ximo campo ou executa a√ß√£o
                widget.bind('<Return>', self.processar_enter_campo)
            
            # Configurar filhos recursivamente
            for child in widget.winfo_children():
                self.configurar_widget_navegacao(child)
        except:
            pass
    
    def processar_enter_campo(self, event):
        """Processar Enter em campos de entrada"""
        widget = event.widget
        
        # Se todos os campos est√£o preenchidos, adicionar produto
        if (self.produto_var.get() and 
            self.quantidade_var.get() and 
            self.preco_var.get()):
            self.adicionar_produto()
            return "break"
        
        # Sen√£o, ir para pr√≥ximo campo
        widget.tk_focusNext().focus()
        return "break"
    
    def mostrar_ajuda(self, event=None):
        """Mostrar ajuda com atalhos de teclado"""
        ajuda_texto = """
üöÄ ATALHOS DE TECLADO - CAIXA R√ÅPIDO

üìã OPERA√á√ïES PRINCIPAIS:
F1  - Mostrar esta ajuda
F2  - Finalizar venda √Ä VISTA
F3  - Finalizar venda FIADO  
F4  - Limpar carrinho
F5  - Limpar campos
F10 - Adicionar produto ao carrinho
ESC - Fechar janela

‚å®Ô∏è ATALHOS R√ÅPIDOS:
Enter      - Adicionar produto
Delete     - Remover item selecionado
Ctrl+A     - Adicionar produto  
Ctrl+L     - Limpar campos
Ctrl+D     - Remover item
Ctrl+1     - Finalizar √† vista
Ctrl+2     - Finalizar fiado

üí° DICAS DE USO:
‚Ä¢ Selecione produto ‚Üí pre√ßo aparece automaticamente
‚Ä¢ Digite quantidade ‚Üí total calcula sozinho
‚Ä¢ Use Enter para adicionar rapidamente
‚Ä¢ Use F2/F3 para finalizar sem usar mouse

üë• ACESSIBILIDADE:
‚Ä¢ Textos grandes e contrastados
‚Ä¢ Atalhos simples de memorizar
‚Ä¢ Feedback sonoro nas a√ß√µes
‚Ä¢ Interface limpa e organizada
        """
        
        help_window = tk.Toplevel(self.window)
        help_window.title("üìö Ajuda - Atalhos de Teclado")
        help_window.geometry("600x500")
        help_window.transient(self.window)
        centralizar_janela(help_window)
        
        # Aguardar janela ser vis√≠vel antes de grab_set
        help_window.after(100, lambda: help_window.grab_set())
        
        text_widget = tk.Text(help_window, wrap=tk.WORD, font=("Arial", 11), 
                             bg="#f8f9fa", padx=20, pady=20)
        text_widget.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)
        text_widget.insert("1.0", ajuda_texto)
        text_widget.config(state=tk.DISABLED)
        
        # Bot√£o fechar
        ttk.Button(help_window, text="‚ùå Fechar (ESC)", 
                  command=help_window.destroy).pack(pady=10)
        help_window.bind('<Escape>', lambda e: help_window.destroy())
        help_window.focus()
    
    def setup_ui(self):
        """Configurar interface de vendas com carrinho otimizada"""
        main_frame = ttk.Frame(self.window, padding="12")
        main_frame.pack(fill=tk.BOTH, expand=True)
        
        # Cabe√ßalho simplificado
        header_frame = ttk.Frame(main_frame)
        header_frame.pack(fill=tk.X, pady=(0, 12))
        
        # T√≠tulo grande e cliente na mesma linha
        ttk.Label(header_frame, text="üí∞ CAIXA", font=("Arial", 22, "bold"), foreground="#2E8B57").pack(side=tk.LEFT)
        
        # Bot√£o ajuda vis√≠vel
        ttk.Button(header_frame, text="‚ùì AJUDA (F1)", command=self.mostrar_ajuda, width=15).pack(side=tk.LEFT, padx=(20, 0))
        
        # Cliente no canto direito com fonte maior
        cliente_frame = ttk.Frame(header_frame)
        cliente_frame.pack(side=tk.RIGHT)
        ttk.Label(cliente_frame, text="Cliente:", font=("Arial", 12, "bold")).pack(side=tk.LEFT)
        cliente_entry = ttk.Entry(cliente_frame, textvariable=self.cliente_nome_var, width=25, font=("Arial", 12))
        cliente_entry.pack(side=tk.LEFT, padx=(5, 0))
        
        # Separador visual
        separator = ttk.Separator(main_frame, orient='horizontal')
        separator.pack(fill=tk.X, pady=(0, 12))
        
        # Container principal otimizado
        content_frame = ttk.Frame(main_frame)
        content_frame.pack(fill=tk.BOTH, expand=True)
        
        # Painel esquerdo - Entrada de produtos (mais compacto)
        left_panel = ttk.LabelFrame(content_frame, text="üì¶ Adicionar Produto", padding="12")
        left_panel.pack(side=tk.LEFT, fill=tk.Y, padx=(0, 8))
        left_panel.config(width=350)  # Largura fixa
        
        # Campos com fontes maiores para melhor visibilidade
        ttk.Label(left_panel, text="Produto:", font=("Arial", 14, "bold")).grid(row=0, column=0, sticky="w", pady=(0, 8))
        self.produto_combo = ttk.Combobox(left_panel, textvariable=self.produto_var, width=30, state="readonly", font=("Arial", 12))
        self.produto_combo.grid(row=1, column=0, columnspan=2, sticky="ew", pady=(0, 15))
        self.produto_combo.bind('<<ComboboxSelected>>', self.produto_selecionado)
        
        # Quantidade e pre√ßo com layout melhorado
        qty_price_frame = ttk.Frame(left_panel)
        qty_price_frame.grid(row=2, column=0, columnspan=2, sticky="ew", pady=(0, 15))
        
        # Quantidade com fonte maior
        ttk.Label(qty_price_frame, text="Quantidade:", font=("Arial", 12, "bold")).grid(row=0, column=0, sticky="w")
        quantidade_entry = ttk.Entry(qty_price_frame, textvariable=self.quantidade_var, width=8, font=("Arial", 14))
        quantidade_entry.grid(row=1, column=0, sticky="w", padx=(0, 15))
        
        # Pre√ßo com fonte maior
        ttk.Label(qty_price_frame, text="Pre√ßo (R$):", font=("Arial", 12, "bold")).grid(row=0, column=1, sticky="w")
        preco_entry = ttk.Entry(qty_price_frame, textvariable=self.preco_var, width=12, font=("Arial", 14))
        preco_entry.grid(row=1, column=1, sticky="w")
        
        # Total do item mais destacado
        total_item_frame = ttk.Frame(left_panel)
        total_item_frame.grid(row=3, column=0, columnspan=2, pady=(10, 20))
        
        ttk.Label(total_item_frame, text="TOTAL:", font=("Arial", 14, "bold")).pack(side=tk.LEFT)
        self.total_item_label = ttk.Label(total_item_frame, text="R$ 0,00", 
                                         font=("Arial", 18, "bold"), foreground="#FF6B35")
        self.total_item_label.pack(side=tk.LEFT, padx=(10, 0))
        
        # Bot√£o adicionar muito grande e destacado
        btn_adicionar = ttk.Button(left_panel, text="‚ûï ADICIONAR (Enter)", 
                                  command=self.adicionar_produto, width=25)
        btn_adicionar.grid(row=4, column=0, columnspan=2, pady=(0, 10), sticky="ew", ipady=8)
        
        # Bot√£o limpar destacado
        btn_limpar = ttk.Button(left_panel, text="üîÑ Limpar (F5)", 
                               command=self.limpar_campos_rapido, width=25)
        btn_limpar.grid(row=5, column=0, columnspan=2, sticky="ew", ipady=5)
        
        # Instru√ß√µes simples
        instrucoes = ttk.Label(left_panel, text="üí° Pressione F1 para ver todos os atalhos", 
                              font=("Arial", 10), foreground="blue", cursor="hand2")
        instrucoes.grid(row=6, column=0, columnspan=2, pady=(15, 0))
        instrucoes.bind("<Button-1>", self.mostrar_ajuda)
        
        left_panel.columnconfigure(0, weight=1)
        
        # Binding para c√°lculos
        self.quantidade_var.trace('w', self.calcular_total_item)
        self.preco_var.trace('w', self.calcular_total_item)
        
        # Painel direito - Carrinho otimizado
        right_panel = ttk.LabelFrame(content_frame, text="üõí Carrinho de Compras", padding="12")
        right_panel.pack(side=tk.RIGHT, fill=tk.BOTH, expand=True)
        
        # Carrinho com fontes maiores
        carrinho_frame = ttk.Frame(right_panel)
        carrinho_frame.pack(fill=tk.BOTH, expand=True)
        
        carrinho_columns = ("Produto", "Qtd", "Pre√ßo", "Total")
        self.carrinho_tree = ttk.Treeview(carrinho_frame, columns=carrinho_columns, show="headings", height=12)
        
        # Cabe√ßalhos com fontes maiores e mais espa√ßo
        self.carrinho_tree.heading("Produto", text="PRODUTO", anchor="w")
        self.carrinho_tree.heading("Qtd", text="QTD", anchor="center")
        self.carrinho_tree.heading("Pre√ßo", text="PRE√áO", anchor="center")
        self.carrinho_tree.heading("Total", text="TOTAL", anchor="center")
        
        # Colunas com altura de linha maior
        self.carrinho_tree.column("Produto", width=240, anchor="w")
        self.carrinho_tree.column("Qtd", width=70, anchor="center")
        self.carrinho_tree.column("Pre√ßo", width=100, anchor="center")
        self.carrinho_tree.column("Total", width=100, anchor="center")
        
        # Configurar altura das linhas para melhor legibilidade
        style = ttk.Style()
        style.configure("Treeview", rowheight=25)
        style.configure("Treeview.Heading", font=("Arial", 11, "bold"))
        
        # Scrollbar
        carrinho_scroll = ttk.Scrollbar(carrinho_frame, orient="vertical", command=self.carrinho_tree.yview)
        self.carrinho_tree.configure(yscrollcommand=carrinho_scroll.set)
        
        self.carrinho_tree.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)
        carrinho_scroll.pack(side=tk.RIGHT, fill=tk.Y)
        
        # Bot√µes do carrinho maiores e mais vis√≠veis
        carrinho_btn_frame = ttk.Frame(right_panel)
        carrinho_btn_frame.pack(fill=tk.X, pady=(10, 0))
        
        ttk.Button(carrinho_btn_frame, text="üóëÔ∏è Remover (Del)", command=self.remover_item, width=15).pack(side=tk.LEFT, padx=(0, 8))
        ttk.Button(carrinho_btn_frame, text="üßπ Limpar (F4)", command=self.limpar_carrinho, width=15).pack(side=tk.LEFT)
        
        # Contador de itens maior
        self.contador_label = ttk.Label(carrinho_btn_frame, text="Carrinho vazio", font=("Arial", 11, "bold"), foreground="#666")
        self.contador_label.pack(side=tk.RIGHT)
        
        # Rodap√© com total e bot√µes
        footer_frame = ttk.Frame(main_frame)
        footer_frame.pack(fill=tk.X, pady=(15, 0))
        
        # Separador
        separator2 = ttk.Separator(footer_frame, orient='horizontal')
        separator2.pack(fill=tk.X, pady=(0, 10))
        
        # Total e bot√µes na mesma linha
        footer_content = ttk.Frame(footer_frame)
        footer_content.pack(fill=tk.X)
        
        # Total muito grande e super destacado
        total_geral_frame = ttk.Frame(footer_content)
        total_geral_frame.pack(side=tk.LEFT)
        
        ttk.Label(total_geral_frame, text="TOTAL:", font=("Arial", 20, "bold")).pack(side=tk.LEFT)
        self.total_geral_label = ttk.Label(total_geral_frame, text="R$ 0,00", 
                                          font=("Arial", 28, "bold"), foreground="#DC143C")
        self.total_geral_label.pack(side=tk.LEFT, padx=(15, 0))
        
        # Bot√µes de finaliza√ß√£o muito grandes e destacados
        btn_final_frame = ttk.Frame(footer_content)
        btn_final_frame.pack(side=tk.RIGHT)
        
        # Bot√µes com atalhos vis√≠veis
        btn_a_vista = ttk.Button(btn_final_frame, text="üí≥ √Ä VISTA (F2)", command=self.finalizar_a_vista, width=18)
        btn_a_vista.pack(side=tk.LEFT, padx=(0, 10), ipady=8)
        
        btn_fiado = ttk.Button(btn_final_frame, text="üìã FIADO (F3)", command=self.finalizar_fiado, width=18)
        btn_fiado.pack(side=tk.LEFT, padx=(0, 10), ipady=8)
        
        btn_fechar = ttk.Button(btn_final_frame, text="‚ùå FECHAR (ESC)", command=self.window.destroy, width=15)
        btn_fechar.pack(side=tk.LEFT, ipady=8)
        
        # Estilo para bot√µes maiores
        style.configure("Large.TButton", font=("Arial", 11, "bold"))
    
    def limpar_campos_rapido(self):
        """Limpar apenas os campos de entrada"""
        self.produto_combo.set("")
        self.quantidade_var.set("1")
        self.preco_var.set("")
        self.total_item_label.config(text="R$ 0,00")
        self.produto_combo.focus()
        
        # Feedback visual
        self.window.title("üí∞ Caixa - Campos limpos")
        self.window.after(1500, lambda: self.window.title("üí∞ Caixa - Sistema de Vendas [F1=Ajuda | F2=√Ä Vista | F3=Fiado | ESC=Fechar]"))
    
    def carregar_produtos(self):
        """Carregar produtos do estoque"""
        try:
            with sqlite3.connect(self.db.db_path) as conn:
                cursor = conn.cursor()
                cursor.execute("SELECT produto, preco FROM estoque ORDER BY produto")
                produtos = cursor.fetchall()
                
                # Adicionar produtos ao combobox
                produtos_lista = [f"{produto} - R$ {preco:.2f}" for produto, preco in produtos]
                self.produto_combo['values'] = produtos_lista
                
                if not produtos_lista:
                    self.produto_combo['values'] = ["Nenhum produto cadastrado"]
                    
        except Exception as e:
            messagebox.showerror("Erro", f"Erro ao carregar produtos: {e}")
    
    def produto_selecionado(self, event):
        """Quando um produto √© selecionado, preencher pre√ßo automaticamente"""
        produto_info = self.produto_combo.get()
        if " - R$ " in produto_info:
            preco_str = produto_info.split(" - R$ ")[1]
            self.preco_var.set(preco_str)
    
    def calcular_total_item(self, *args):
        """Calcular total do item atual"""
        try:
            quantidade = float(self.quantidade_var.get() or 0)
            preco = float(self.preco_var.get() or 0)
            total = quantidade * preco
            self.total_item_label.config(text=f"R$ {total:.2f}")
        except ValueError:
            self.total_item_label.config(text="R$ 0,00")
    
    def adicionar_produto(self):
        """Adicionar produto ao carrinho"""
        try:
            produto_info = self.produto_combo.get()
            quantidade = int(self.quantidade_var.get())
            preco = float(self.preco_var.get().replace(',', '.'))
            
            if not produto_info or produto_info == "Nenhum produto cadastrado":
                messagebox.showerror("Erro", "Selecione um produto v√°lido")
                return
                
            if quantidade <= 0 or preco <= 0:
                messagebox.showerror("Erro", "Quantidade e pre√ßo devem ser maiores que zero")
                return
            
            produto_nome = produto_info.split(" - R$ ")[0]
            total_item = quantidade * preco
            
            # Adicionar ao carrinho
            self.carrinho.append({
                'produto': produto_nome,
                'quantidade': quantidade,
                'preco_unitario': preco,
                'total': total_item
            })
            
            # Atualizar interface
            self.atualizar_carrinho()
            
            # Limpar campos e focar no pr√≥ximo produto
            self.limpar_campos_rapido()
            
            # Feedback sonoro e visual
            try:
                self.window.bell()  # Som de confirma√ß√£o
                self.window.title("üí∞ Caixa - Produto adicionado!")
                # Resetar t√≠tulo ap√≥s 2 segundos
                self.window.after(2000, lambda: self.window.title("üí∞ Caixa - Sistema de Vendas [F1=Ajuda | F2=√Ä Vista | F3=Fiado | ESC=Fechar]"))
            except:
                pass
            
        except ValueError:
            messagebox.showerror("Erro", "Quantidade deve ser um n√∫mero inteiro e pre√ßo um n√∫mero v√°lido")
        except Exception as e:
            messagebox.showerror("Erro", f"Erro ao adicionar produto: {e}")
    
    def atualizar_carrinho(self):
        """Atualizar exibi√ß√£o do carrinho"""
        # Limpar treeview
        for item in self.carrinho_tree.get_children():
            self.carrinho_tree.delete(item)
        
        # Adicionar itens
        self.total_geral = 0.0
        for item in self.carrinho:
            self.carrinho_tree.insert("", "end", values=(
                item['produto'],
                item['quantidade'],
                f"R$ {item['preco_unitario']:.2f}",
                f"R$ {item['total']:.2f}"
            ))
            self.total_geral += item['total']
        
        # Atualizar total geral e contador
        self.total_geral_label.config(text=f"R$ {self.total_geral:.2f}")
        
        # Atualizar contador de itens
        qtd_total = sum(item['quantidade'] for item in self.carrinho)
        if len(self.carrinho) == 0:
            self.contador_label.config(text="Carrinho vazio")
        elif len(self.carrinho) == 1:
            self.contador_label.config(text=f"{qtd_total} item")
        else:
            self.contador_label.config(text=f"{qtd_total} itens ‚Ä¢ {len(self.carrinho)} produtos")
    
    def remover_item(self):
        """Remover item selecionado do carrinho"""
        selected = self.carrinho_tree.selection()
        if not selected:
            messagebox.showwarning("Aviso", "Selecione um item para remover")
            return
        
        # Obter √≠ndice do item
        index = self.carrinho_tree.index(selected[0])
        
        # Remover do carrinho
        if 0 <= index < len(self.carrinho):
            item_removido = self.carrinho.pop(index)
            self.atualizar_carrinho()
            # Feedback visual mais sutil
            self.window.title(f"üí∞ Caixa - '{item_removido['produto']}' removido")
    
    def limpar_carrinho(self):
        """Limpar todo o carrinho"""
        if self.carrinho:
            qtd_itens = len(self.carrinho)
            if messagebox.askyesno("Confirmar Limpeza", f"Limpar {qtd_itens} produto(s) do carrinho?"):
                self.carrinho.clear()
                self.atualizar_carrinho()
                self.cliente_nome_var.set("")
                self.window.title("üí∞ Caixa - Carrinho limpo")
    
    def finalizar_a_vista(self):
        """Finalizar vendas √† vista"""
        if not self.carrinho:
            messagebox.showwarning("Aviso", "Carrinho est√° vazio")
            return
        
        cliente = self.cliente_nome_var.get().strip() or "Cliente An√¥nimo"
        
        if messagebox.askyesno("Confirmar Venda", 
                             f"Finalizar venda √† vista?\n\n"
                             f"Cliente: {cliente}\n"
                             f"Itens: {len(self.carrinho)} produtos\n"
                             f"Total: R$ {self.total_geral:.2f}"):
            
            try:
                # Registrar todas as vendas
                with sqlite3.connect(self.db.db_path) as conn:
                    cursor = conn.cursor()
                    for item in self.carrinho:
                        cursor.execute("""
                            INSERT INTO historico_vendas (produto, quantidade, preco_unitario, total)
                            VALUES (?, ?, ?, ?)
                        """, (item['produto'], item['quantidade'], item['preco_unitario'], item['total']))
                    conn.commit()
                
                # Tocar som de sucesso
                try:
                    for _ in range(2):
                        self.window.bell()
                        self.window.after(100)
                except:
                    pass
                
                messagebox.showinfo("‚úÖ Venda Finalizada!", 
                                  f"Venda √† vista conclu√≠da com sucesso!\n\n"
                                  f"Cliente: {cliente}\n"
                                  f"Produtos: {len(self.carrinho)} itens\n"
                                  f"Total pago: R$ {self.total_geral:.2f}\n\n"
                                  f"Obrigado pela prefer√™ncia!")
                
                # Limpar carrinho
                self.carrinho.clear()
                self.atualizar_carrinho()
                self.cliente_nome_var.set("")
                
            except Exception as e:
                messagebox.showerror("Erro", f"Erro ao finalizar venda: {e}")
    
    def finalizar_fiado(self):
        """Finalizar vendas fiado"""
        if not self.carrinho:
            messagebox.showwarning("Aviso", "Carrinho est√° vazio")
            return
        
        cliente = self.cliente_nome_var.get().strip()
        if not cliente:
            messagebox.showerror("Erro", "Nome do cliente √© obrigat√≥rio para vendas fiado")
            return
        
        # Abrir janela de dados do fiado
        VendaFiadoCarrinhoWindow(self.window, self.db, cliente, self.carrinho, self.total_geral, self)


class VendaFiadoCarrinhoWindow:
    """Janela para dados adicionais da venda fiado do carrinho"""
    
    def __init__(self, parent, db, cliente, carrinho, total, vendas_window):
        self.parent = parent
        self.db = db
        self.cliente = cliente
        self.carrinho = carrinho
        self.total = total
        self.vendas_window = vendas_window
        
        self.window = tk.Toplevel(parent)
        self.window.title("üìã Finalizar Venda Fiado")
        self.window.geometry("550x450")
        self.window.transient(parent)
        self.window.grab_set()
        centralizar_janela(self.window)
        
        # Vari√°veis
        self.telefone_var = tk.StringVar()
        self.data_vencimento_var = tk.StringVar()
        self.observacoes_var = tk.StringVar()
        
        # Data padr√£o (30 dias)
        data_venc = (datetime.now() + timedelta(days=30)).strftime("%d/%m/%Y")
        self.data_vencimento_var.set(data_venc)
        
        self.setup_ui()
    
    def setup_ui(self):
        """Configurar interface"""
        main_frame = ttk.Frame(self.window, padding="20")
        main_frame.pack(fill=tk.BOTH, expand=True)
        
        # T√≠tulo
        title = ttk.Label(main_frame, text="üìã Finalizar Venda Fiado", font=("Arial", 16, "bold"))
        title.pack(pady=(0, 15))
        
        # Resumo da venda
        resumo_frame = ttk.LabelFrame(main_frame, text="Resumo da Venda", padding="10")
        resumo_frame.pack(fill=tk.X, pady=(0, 15))
        
        ttk.Label(resumo_frame, text=f"Cliente: {self.cliente}", font=("Arial", 11, "bold")).pack(anchor="w")
        ttk.Label(resumo_frame, text=f"Quantidade de itens: {len(self.carrinho)} produtos").pack(anchor="w")
        
        # Lista de produtos
        produtos_text = ", ".join([f"{item['quantidade']}x {item['produto']}" for item in self.carrinho[:3]])
        if len(self.carrinho) > 3:
            produtos_text += f" e mais {len(self.carrinho) - 3} itens..."
        ttk.Label(resumo_frame, text=f"Produtos: {produtos_text}").pack(anchor="w")
        
        ttk.Label(resumo_frame, text=f"Total: R$ {self.total:.2f}", 
                 font=("Arial", 12, "bold"), foreground="red").pack(anchor="w")
        
        # Dados adicionais
        dados_frame = ttk.LabelFrame(main_frame, text="Dados do Cliente", padding="15")
        dados_frame.pack(fill=tk.X, pady=(0, 15))
        
        # Telefone
        ttk.Label(dados_frame, text="Telefone:").grid(row=0, column=0, sticky="w", pady=8)
        telefone_entry = ttk.Entry(dados_frame, textvariable=self.telefone_var, width=20)
        telefone_entry.grid(row=0, column=1, padx=(10, 0), pady=8, sticky="ew")
        telefone_entry.focus()
        
        # Data vencimento
        ttk.Label(dados_frame, text="Data de Vencimento:").grid(row=1, column=0, sticky="w", pady=8)
        venc_entry = ttk.Entry(dados_frame, textvariable=self.data_vencimento_var, width=15)
        venc_entry.grid(row=1, column=1, padx=(10, 0), pady=8, sticky="w")
        
        # Observa√ß√µes
        ttk.Label(dados_frame, text="Observa√ß√µes:").grid(row=2, column=0, sticky="w", pady=8)
        obs_entry = ttk.Entry(dados_frame, textvariable=self.observacoes_var, width=35)
        obs_entry.grid(row=2, column=1, padx=(10, 0), pady=8, sticky="ew")
        
        dados_frame.columnconfigure(1, weight=1)
        
        # Bot√µes
        btn_frame = ttk.Frame(main_frame)
        btn_frame.pack(fill=tk.X, pady=(15, 0))
        
        ttk.Button(btn_frame, text="üíæ Confirmar Venda Fiado", 
                  command=self.confirmar_fiado, width=20).pack(side=tk.LEFT, padx=(0, 10))
        ttk.Button(btn_frame, text="‚ùå Cancelar", 
                  command=self.window.destroy, width=15).pack(side=tk.RIGHT)
    
    def confirmar_fiado(self):
        """Confirmar venda fiado do carrinho"""
        try:
            telefone = self.telefone_var.get().strip()
            data_venc = self.data_vencimento_var.get().strip()
            observacoes = self.observacoes_var.get().strip()
            
            # Registrar na tabela de contas abertas
            with sqlite3.connect(self.db.db_path) as conn:
                cursor = conn.cursor()
                for item in self.carrinho:
                    cursor.execute("""
                        INSERT INTO contas_abertas 
                        (cliente_nome, cliente_telefone, produto, quantidade, preco_unitario, total, data_vencimento, observacoes)
                        VALUES (?, ?, ?, ?, ?, ?, ?, ?)
                    """, (self.cliente, telefone, item['produto'], item['quantidade'], 
                          item['preco_unitario'], item['total'], data_venc, observacoes))
                conn.commit()
            
            # Som de confirma√ß√£o fiado
            try:
                self.window.bell()
            except:
                pass
                
            messagebox.showinfo("üìã Venda Fiado Registrada!", 
                              f"Conta registrada com sucesso!\n\n"
                              f"Cliente: {self.cliente}\n"
                              f"Telefone: {telefone or 'N√£o informado'}\n"
                              f"Produtos: {len(self.carrinho)} itens\n"
                              f"Valor total: R$ {self.total:.2f}\n"
                              f"Vencimento: {data_venc}\n\n"
                              f"Lembre o cliente da data de pagamento!")
            
            # Limpar carrinho da janela principal
            self.vendas_window.carrinho.clear()
            self.vendas_window.atualizar_carrinho()
            self.vendas_window.cliente_nome_var.set("")
            
            self.window.destroy()
            
        except Exception as e:
            messagebox.showerror("Erro", f"Erro ao registrar venda fiado: {e}")

class VendaFiadoWindow:
    """Janela para registrar venda fiado"""
    
    def __init__(self, parent, db, produto_selecionado, quantidade, preco):
        self.parent = parent
        self.db = db
        self.produto_selecionado = produto_selecionado
        self.quantidade = quantidade
        self.preco = preco
        self.total = quantidade * preco
        
        self.window = tk.Toplevel(parent)
        self.window.title("üìã Venda Fiado - Dados do Cliente")
        self.window.geometry("500x450")
        self.window.transient(parent)
        self.window.grab_set()
        centralizar_janela(self.window)
        
        # Vari√°veis
        self.cliente_nome_var = tk.StringVar()
        self.cliente_telefone_var = tk.StringVar()
        self.data_vencimento_var = tk.StringVar()
        self.observacoes_var = tk.StringVar()
        
        self.setup_ui()
    
    def setup_ui(self):
        """Configurar interface"""
        main_frame = ttk.Frame(self.window, padding="20")
        main_frame.pack(fill=tk.BOTH, expand=True)
        
        # T√≠tulo
        title = ttk.Label(main_frame, text="üìã Registrar Venda Fiado", font=("Arial", 16, "bold"))
        title.pack(pady=(0, 15))
        
        # Frame resumo da venda
        resumo_frame = ttk.LabelFrame(main_frame, text="Resumo da Venda", padding="10")
        resumo_frame.pack(fill=tk.X, pady=(0, 15))
        
        produto_nome = self.produto_selecionado.split(" - R$")[0]
        ttk.Label(resumo_frame, text=f"Produto: {produto_nome}").pack(anchor="w")
        ttk.Label(resumo_frame, text=f"Quantidade: {self.quantidade}").pack(anchor="w")
        ttk.Label(resumo_frame, text=f"Pre√ßo Unit√°rio: R$ {self.preco:.2f}").pack(anchor="w")
        ttk.Label(resumo_frame, text=f"Total: R$ {self.total:.2f}", font=("Arial", 11, "bold"), foreground="red").pack(anchor="w")
        
        # Frame dados do cliente
        cliente_frame = ttk.LabelFrame(main_frame, text="Dados do Cliente", padding="15")
        cliente_frame.pack(fill=tk.X, pady=(0, 15))
        
        # Nome do cliente
        ttk.Label(cliente_frame, text="Nome do Cliente: *").grid(row=0, column=0, sticky="w", pady=8)
        cliente_entry = ttk.Entry(cliente_frame, textvariable=self.cliente_nome_var, width=35, font=("Arial", 11))
        cliente_entry.grid(row=0, column=1, padx=(10, 0), pady=8, sticky="ew")
        cliente_entry.focus()
        
        # Telefone
        ttk.Label(cliente_frame, text="Telefone:").grid(row=1, column=0, sticky="w", pady=8)
        telefone_entry = ttk.Entry(cliente_frame, textvariable=self.cliente_telefone_var, width=35)
        telefone_entry.grid(row=1, column=1, padx=(10, 0), pady=8, sticky="ew")
        
        # Data de vencimento
        ttk.Label(cliente_frame, text="Vencimento (dd/mm/aaaa):").grid(row=2, column=0, sticky="w", pady=8)
        vencimento_entry = ttk.Entry(cliente_frame, textvariable=self.data_vencimento_var, width=20)
        vencimento_entry.grid(row=2, column=1, padx=(10, 0), pady=8, sticky="w")
        
        # Definir vencimento padr√£o para 30 dias
        vencimento_padrao = (datetime.now() + datetime.timedelta(days=30)).strftime("%d/%m/%Y")
        self.data_vencimento_var.set(vencimento_padrao)
        
        # Observa√ß√µes
        ttk.Label(cliente_frame, text="Observa√ß√µes:").grid(row=3, column=0, sticky="nw", pady=8)
        obs_entry = ttk.Entry(cliente_frame, textvariable=self.observacoes_var, width=35)
        obs_entry.grid(row=3, column=1, padx=(10, 0), pady=8, sticky="ew")
        
        cliente_frame.columnconfigure(1, weight=1)
        
        # Aviso
        aviso_frame = ttk.Frame(main_frame)
        aviso_frame.pack(fill=tk.X, pady=(0, 15))
        
        aviso_text = tk.Text(aviso_frame, height=3, wrap=tk.WORD, font=("Arial", 9))
        aviso_text.pack(fill=tk.X)
        aviso_text.insert("1.0", "‚ö†Ô∏è ATEN√á√ÉO: Esta venda ficar√° registrada como conta em aberto.\n"
                                "O cliente pode pagar posteriormente atrav√©s da op√ß√£o 'Contas em Aberto'.\n"
                                "* Campos obrigat√≥rios")
        aviso_text.config(state=tk.DISABLED, bg="#fff3cd")
        
        # Bot√µes
        btn_frame = ttk.Frame(main_frame)
        btn_frame.pack(fill=tk.X)
        
        ttk.Button(btn_frame, text="üìã Registrar Fiado", command=self.registrar_fiado, width=20).pack(side=tk.LEFT, padx=(0, 10))
        ttk.Button(btn_frame, text="‚ùå Cancelar", command=self.window.destroy, width=15).pack(side=tk.RIGHT)
        
        # Binding Enter
        self.window.bind('<Return>', lambda e: self.registrar_fiado())
    
    def registrar_fiado(self):
        """Registrar venda fiado no banco"""
        try:
            cliente_nome = self.cliente_nome_var.get().strip()
            cliente_telefone = self.cliente_telefone_var.get().strip()
            data_vencimento = self.data_vencimento_var.get().strip()
            observacoes = self.observacoes_var.get().strip()
            
            if not cliente_nome:
                messagebox.showerror("Erro", "Nome do cliente √© obrigat√≥rio!")
                return
            
            # Validar data de vencimento
            if data_vencimento:
                try:
                    datetime.strptime(data_vencimento, "%d/%m/%Y")
                except ValueError:
                    messagebox.showerror("Erro", "Data de vencimento inv√°lida! Use o formato dd/mm/aaaa")
                    return
            
            # Extrair nome do produto
            produto = self.produto_selecionado.split(" - R$")[0]
            
            # Registrar no banco
            with sqlite3.connect(self.db.db_path) as conn:
                cursor = conn.cursor()
                cursor.execute("""
                    INSERT INTO contas_abertas 
                    (cliente_nome, cliente_telefone, produto, quantidade, preco_unitario, total, data_vencimento, observacoes)
                    VALUES (?, ?, ?, ?, ?, ?, ?, ?)
                """, (cliente_nome, cliente_telefone, produto, self.quantidade, self.preco, self.total, data_vencimento, observacoes))
                conn.commit()
            
            messagebox.showinfo("Sucesso", f"Venda fiado registrada com sucesso!\n\n"
                                         f"Cliente: {cliente_nome}\n"
                                         f"Produto: {produto}\n"
                                         f"Total: R$ {self.total:.2f}\n"
                                         f"Vencimento: {data_vencimento or 'N√£o definido'}")
            
            self.window.destroy()
            
        except Exception as e:
            messagebox.showerror("Erro", f"Erro ao registrar venda fiado: {e}")

class ContasAbertasWindow:
    """Janela para gerenciar contas em aberto"""
    
    def __init__(self, parent, db):
        self.parent = parent
        self.db = db
        
        self.window = tk.Toplevel(parent)
        self.window.title("üìã Contas em Aberto")
        self.window.geometry("1000x650")
        self.window.transient(parent)
        self.window.grab_set()
        centralizar_janela(self.window)
        
        self.setup_ui()
        self.carregar_contas()
    
    def setup_ui(self):
        """Configurar interface"""
        main_frame = ttk.Frame(self.window, padding="15")
        main_frame.pack(fill=tk.BOTH, expand=True)
        
        # T√≠tulo
        title = ttk.Label(main_frame, text="üìã Contas em Aberto", font=("Arial", 16, "bold"))
        title.pack(pady=(0, 15))
        
        # Frame de filtros
        filter_frame = ttk.LabelFrame(main_frame, text="Filtros", padding="10")
        filter_frame.pack(fill=tk.X, pady=(0, 15))
        
        # Filtros em linha
        filter_row = ttk.Frame(filter_frame)
        filter_row.pack(fill=tk.X)
        
        ttk.Label(filter_row, text="Mostrar:").pack(side=tk.LEFT, padx=(0, 10))
        self.filtro_var = tk.StringVar(value="pendentes")
        
        ttk.Radiobutton(filter_row, text="Apenas Pendentes", variable=self.filtro_var, value="pendentes", command=self.carregar_contas).pack(side=tk.LEFT, padx=(0, 15))
        ttk.Radiobutton(filter_row, text="Apenas Pagas", variable=self.filtro_var, value="pagas", command=self.carregar_contas).pack(side=tk.LEFT, padx=(0, 15))
        ttk.Radiobutton(filter_row, text="Todas", variable=self.filtro_var, value="todas", command=self.carregar_contas).pack(side=tk.LEFT, padx=(0, 15))
        
        ttk.Button(filter_row, text="üîÑ Atualizar", command=self.carregar_contas, width=12).pack(side=tk.RIGHT)
        
        # Frame da lista
        list_frame = ttk.LabelFrame(main_frame, text="Lista de Contas", padding="10")
        list_frame.pack(fill=tk.BOTH, expand=True, pady=(0, 15))
        
        # Treeview
        self.contas_tree = ttk.Treeview(list_frame, columns=("cliente", "telefone", "produto", "qtd", "total", "data_venda", "vencimento", "status"), show="headings", height=15)
        
        # Configurar colunas
        self.contas_tree.heading("cliente", text="Cliente")
        self.contas_tree.heading("telefone", text="Telefone")
        self.contas_tree.heading("produto", text="Produto")
        self.contas_tree.heading("qtd", text="Qtd")
        self.contas_tree.heading("total", text="Total")
        self.contas_tree.heading("data_venda", text="Data Venda")
        self.contas_tree.heading("vencimento", text="Vencimento")
        self.contas_tree.heading("status", text="Status")
        
        self.contas_tree.column("cliente", width=150)
        self.contas_tree.column("telefone", width=100)
        self.contas_tree.column("produto", width=150)
        self.contas_tree.column("qtd", width=50)
        self.contas_tree.column("total", width=80)
        self.contas_tree.column("data_venda", width=100)
        self.contas_tree.column("vencimento", width=100)
        self.contas_tree.column("status", width=80)
        
        # Scrollbar
        scrollbar_contas = ttk.Scrollbar(list_frame, orient=tk.VERTICAL, command=self.contas_tree.yview)
        self.contas_tree.configure(yscrollcommand=scrollbar_contas.set)
        
        self.contas_tree.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)
        scrollbar_contas.pack(side=tk.RIGHT, fill=tk.Y)
        
        # Frame dos bot√µes
        btn_frame = ttk.Frame(main_frame)
        btn_frame.pack(fill=tk.X)
        
        ttk.Button(btn_frame, text="üí∞ Marcar como Pago", command=self.marcar_como_pago, width=18).pack(side=tk.LEFT, padx=(0, 10))
        ttk.Button(btn_frame, text="‚úèÔ∏è Editar", command=self.editar_conta, width=12).pack(side=tk.LEFT, padx=(0, 10))
        ttk.Button(btn_frame, text="üóëÔ∏è Excluir", command=self.excluir_conta, width=12).pack(side=tk.LEFT, padx=(0, 10))
        
        # Estat√≠sticas
        self.stats_label = ttk.Label(btn_frame, text="", font=("Arial", 10))
        self.stats_label.pack(side=tk.LEFT, padx=(20, 0))
        
        ttk.Button(btn_frame, text="‚ùå Fechar", command=self.window.destroy, width=12).pack(side=tk.RIGHT)
    
    def carregar_contas(self):
        """Carregar contas em aberto agrupadas por cliente"""
        # Limpar lista
        for item in self.contas_tree.get_children():
            self.contas_tree.delete(item)
        
        try:
            filtro = self.filtro_var.get()
            
            with sqlite3.connect(self.db.db_path) as conn:
                cursor = conn.cursor()
                
                if filtro == "pendentes":
                    query = "SELECT * FROM contas_abertas WHERE pago = 0 ORDER BY cliente_nome, data_venda DESC"
                elif filtro == "pagas":
                    query = "SELECT * FROM contas_abertas WHERE pago = 1 ORDER BY cliente_nome, data_pagamento DESC"
                else:
                    query = "SELECT * FROM contas_abertas ORDER BY cliente_nome, pago ASC, data_venda DESC"
                
                cursor.execute(query)
                contas = cursor.fetchall()
                
                total_pendente = 0
                total_pago = 0
                count_pendente = 0
                count_pago = 0
                
                # Agrupar contas por cliente
                clientes_agrupados = {}
                
                for conta in contas:
                    id_conta, cliente_nome, cliente_telefone, produto, quantidade, preco_unitario, total, data_venda, data_vencimento, pago, data_pagamento, observacoes = conta
                    
                    # Normalizar nome do cliente (mai√∫sculo e sem espa√ßos extras)
                    cliente_key = cliente_nome.upper().strip()
                    
                    if cliente_key not in clientes_agrupados:
                        clientes_agrupados[cliente_key] = {
                            'nome_original': cliente_nome,
                            'telefone': cliente_telefone,
                            'pedidos': [],
                            'total_pendente': 0,
                            'total_pago': 0,
                            'count_pendente': 0,
                            'count_pago': 0,
                            'tem_vencido': False
                        }
                    
                    # Formatar datas
                    try:
                        data_venda_fmt = datetime.fromisoformat(data_venda).strftime("%d/%m/%Y")
                    except:
                        data_venda_fmt = data_venda[:10] if data_venda else ""
                    
                    data_venc_fmt = data_vencimento if data_vencimento else ""
                    status = "‚úÖ PAGO" if pago else "‚è∞ PENDENTE"
                    
                    # Verificar se est√° vencido
                    vencido = False
                    if not pago and data_vencimento:
                        try:
                            venc_date = datetime.strptime(data_vencimento, "%d/%m/%Y")
                            if venc_date < datetime.now():
                                status = "üî¥ VENCIDO"
                                vencido = True
                                clientes_agrupados[cliente_key]['tem_vencido'] = True
                        except:
                            pass
                    
                    # Adicionar pedido ao cliente
                    clientes_agrupados[cliente_key]['pedidos'].append({
                        'produto': produto,
                        'quantidade': quantidade,
                        'total': total,
                        'data_venda': data_venda_fmt,
                        'data_vencimento': data_venc_fmt,
                        'status': status,
                        'pago': pago,
                        'vencido': vencido
                    })
                    
                    # Estat√≠sticas por cliente
                    if pago:
                        clientes_agrupados[cliente_key]['total_pago'] += total
                        clientes_agrupados[cliente_key]['count_pago'] += 1
                        total_pago += total
                        count_pago += 1
                    else:
                        clientes_agrupados[cliente_key]['total_pendente'] += total
                        clientes_agrupados[cliente_key]['count_pendente'] += 1
                        total_pendente += total
                        count_pendente += 1
                
                # Inserir clientes agrupados na √°rvore
                for cliente_key, dados_cliente in clientes_agrupados.items():
                    # Preparar resumo do cliente
                    total_cliente = dados_cliente['total_pendente'] + dados_cliente['total_pago']
                    count_cliente = dados_cliente['count_pendente'] + dados_cliente['count_pago']
                    
                    # Status do cliente
                    if dados_cliente['tem_vencido']:
                        status_cliente = "üî¥ TEM VENCIDOS"
                    elif dados_cliente['count_pendente'] > 0:
                        status_cliente = "‚è∞ PENDENTE"
                    else:
                        status_cliente = "‚úÖ PAGO"
                    
                    # Resumo dos produtos
                    if count_cliente > 1:
                        produtos_resumo = f"{count_cliente} pedidos"
                    else:
                        produtos_resumo = dados_cliente['pedidos'][0]['produto']
                    
                    # Data mais recente
                    data_recente = max([p['data_venda'] for p in dados_cliente['pedidos']])
                    
                    # Inserir linha principal do cliente
                    cliente_item = self.contas_tree.insert("", "end", values=(
                        dados_cliente['nome_original'],
                        dados_cliente['telefone'] or "",
                        produtos_resumo,
                        count_cliente,
                        f"R$ {total_cliente:.2f}",
                        data_recente,
                        "",
                        status_cliente
                    ))
                    
                    # Inserir pedidos individuais como filhos (se mais de um pedido)
                    if count_cliente > 1:
                        for pedido in dados_cliente['pedidos']:
                            self.contas_tree.insert(cliente_item, "end", values=(
                                "  ‚Üí " + pedido['produto'],
                                "",
                                pedido['produto'],
                                pedido['quantidade'],
                                f"R$ {pedido['total']:.2f}",
                                pedido['data_venda'],
                                pedido['data_vencimento'],
                                pedido['status']
                            ))
                
                # Atualizar estat√≠sticas
                stats_text = f"Pendentes: {count_pendente} (R$ {total_pendente:.2f}) | Pagas: {count_pago} (R$ {total_pago:.2f})"
                self.stats_label.config(text=stats_text)
                
        except Exception as e:
            messagebox.showerror("Erro", f"Erro ao carregar contas: {e}")
    
    def marcar_como_pago(self):
        """Marcar conta selecionada como paga"""
        selection = self.contas_tree.selection()
        if not selection:
            messagebox.showerror("Erro", "Selecione uma conta para marcar como paga")
            return
        
        item = self.contas_tree.item(selection[0])
        values = item['values']
        cliente = values[0].replace("  ‚Üí ", "")  # Remove marcador de sub-item
        produto = values[2]
        total_str = values[4]
        
        if "PAGO" in values[7]:
            messagebox.showinfo("Informa√ß√£o", "Esta conta j√° est√° marcada como paga")
            return
        
        # Verificar se √© um cliente agrupado ou um produto espec√≠fico
        parent = self.contas_tree.parent(selection[0])
        
        if parent:  # √â um pedido espec√≠fico (filho)
            # Marcar pedido espec√≠fico como pago
            if messagebox.askyesno("Confirmar Pagamento", f"Marcar como paga?\n\nCliente: {cliente}\nProduto: {produto}\nValor: {total_str}"):
                try:
                    with sqlite3.connect(self.db.db_path) as conn:
                        cursor = conn.cursor()
                        total_valor = float(total_str.replace("R$ ", ""))
                        cursor.execute("""
                            UPDATE contas_abertas 
                            SET pago = 1, data_pagamento = CURRENT_TIMESTAMP 
                            WHERE cliente_nome LIKE ? AND produto = ? AND total = ? AND pago = 0
                            LIMIT 1
                        """, (f"%{cliente}%", produto, total_valor))
                        
                        if cursor.rowcount > 0:
                            conn.commit()
                            messagebox.showinfo("Sucesso", f"Pedido de {cliente} marcado como pago!")
                            self.carregar_contas()
                        else:
                            messagebox.showerror("Erro", "N√£o foi poss√≠vel encontrar o pedido para marcar como pago")
                            
                except Exception as e:
                    messagebox.showerror("Erro", f"Erro ao marcar como pago: {e}")
        else:  # √â um cliente agrupado (pai)
            # Verificar quantos pedidos pendentes o cliente tem
            try:
                with sqlite3.connect(self.db.db_path) as conn:
                    cursor = conn.cursor()
                    cursor.execute("""
                        SELECT COUNT(*), SUM(total) FROM contas_abertas 
                        WHERE cliente_nome LIKE ? AND pago = 0
                    """, (f"%{cliente}%",))
                    count, total_pendente = cursor.fetchone()
                    
                    if count == 0:
                        messagebox.showinfo("Informa√ß√£o", "Este cliente n√£o possui contas pendentes")
                        return
                    
                    # Confirmar se quer marcar todos os pedidos como pagos
                    msg = f"Marcar TODOS os pedidos de {cliente} como pagos?\n\n"
                    msg += f"Total de pedidos pendentes: {count}\n"
                    msg += f"Valor total: R$ {total_pendente:.2f}"
                    
                    if messagebox.askyesno("Confirmar Pagamento Total", msg):
                        cursor.execute("""
                            UPDATE contas_abertas 
                            SET pago = 1, data_pagamento = CURRENT_TIMESTAMP 
                            WHERE cliente_nome LIKE ? AND pago = 0
                        """, (f"%{cliente}%",))
                        conn.commit()
                        
                        messagebox.showinfo("Sucesso", f"Todos os pedidos de {cliente} foram marcados como pagos!")
                        self.carregar_contas()
                        
            except Exception as e:
                messagebox.showerror("Erro", f"Erro ao marcar como pago: {e}")
    
    def editar_conta(self):
        """Editar conta selecionada"""
        selection = self.contas_tree.selection()
        if not selection:
            messagebox.showerror("Erro", "Selecione uma conta para editar")
            return
        
        item = self.contas_tree.item(selection[0])
        values = item['values']
        cliente = values[0].replace("  ‚Üí ", "")  # Remove marcador de sub-item
        produto = values[2]
        
        # Verificar se √© um cliente agrupado ou um produto espec√≠fico
        parent = self.contas_tree.parent(selection[0])
        
        if not parent:  # √â um cliente agrupado (pai)
            messagebox.showinfo("Informa√ß√£o", "Para editar, selecione um pedido espec√≠fico do cliente, n√£o o cliente agrupado")
            return
        
        # √â um pedido espec√≠fico - buscar dados completos do banco
        try:
            with sqlite3.connect(self.db.db_path) as conn:
                cursor = conn.cursor()
                cursor.execute("""
                    SELECT id, cliente_nome, cliente_telefone, produto, quantidade, 
                           preco_unitario, total, data_venda, data_vencimento, 
                           pago, observacoes 
                    FROM contas_abertas 
                    WHERE cliente_nome LIKE ? AND produto = ? AND pago = 0
                    LIMIT 1
                """, (f"%{cliente}%", produto))
                
                conta_data = cursor.fetchone()
                
                if not conta_data:
                    messagebox.showerror("Erro", "Conta n√£o encontrada ou j√° foi paga")
                    return
                
                # Abrir janela de edi√ß√£o
                dialog = EditarContaDialog(self.window, self.db, conta_data)
                if dialog.resultado:
                    self.carregar_contas()
                    
        except Exception as e:
            messagebox.showerror("Erro", f"Erro ao buscar dados da conta: {e}")
    
    def excluir_conta(self):
        """Excluir conta selecionada"""
        selection = self.contas_tree.selection()
        if not selection:
            messagebox.showerror("Erro", "Selecione uma conta para excluir")
            return
        
        item = self.contas_tree.item(selection[0])
        values = item['values']
        cliente = values[0]
        produto = values[2]
        
        if messagebox.askyesno("Confirmar Exclus√£o", f"Excluir conta?\n\nCliente: {cliente}\nProduto: {produto}"):
            try:
                with sqlite3.connect(self.db.db_path) as conn:
                    cursor = conn.cursor()
                    cursor.execute("""
                        DELETE FROM contas_abertas 
                        WHERE cliente_nome = ? AND produto = ?
                    """, (cliente, produto))
                    conn.commit()
                
                messagebox.showinfo("Sucesso", "Conta exclu√≠da com sucesso!")
                self.carregar_contas()
                
            except Exception as e:
                messagebox.showerror("Erro", f"Erro ao excluir conta: {e}")

class EditarContaDialog:
    """Di√°logo para editar contas em aberto"""
    
    def __init__(self, parent, db, conta_data):
        self.parent = parent
        self.db = db
        self.conta_data = conta_data
        self.resultado = False
        
        # Extrair dados da conta
        (self.conta_id, self.cliente_nome, self.cliente_telefone, self.produto, 
         self.quantidade, self.preco_unitario, self.total, self.data_venda, 
         self.data_vencimento, self.pago, self.observacoes) = conta_data
        
        self.criar_janela()
    
    def criar_janela(self):
        """Criar janela de edi√ß√£o"""
        self.window = tk.Toplevel(self.parent)
        self.window.title("‚úèÔ∏è Editar Conta em Aberto")
        self.window.geometry("500x600")
        self.window.transient(self.parent)
        self.window.grab_set()
        centralizar_janela(self.window)
        
        # Frame principal
        main_frame = ttk.Frame(self.window, padding="20")
        main_frame.pack(fill=tk.BOTH, expand=True)
        
        # T√≠tulo
        titulo = ttk.Label(main_frame, text="‚úèÔ∏è Editar Conta em Aberto", 
                          font=("Arial", 16, "bold"))
        titulo.pack(pady=(0, 20))
        
        # Informa√ß√µes do cliente
        cliente_frame = ttk.LabelFrame(main_frame, text="Dados do Cliente", padding="15")
        cliente_frame.pack(fill=tk.X, pady=(0, 15))
        
        # Nome do cliente
        ttk.Label(cliente_frame, text="Nome do Cliente:", font=("Arial", 10, "bold")).pack(anchor=tk.W)
        self.cliente_nome_var = tk.StringVar(value=self.cliente_nome)
        nome_entry = ttk.Entry(cliente_frame, textvariable=self.cliente_nome_var, 
                              font=("Arial", 12), width=40)
        nome_entry.pack(fill=tk.X, pady=(5, 10))
        
        # Telefone do cliente
        ttk.Label(cliente_frame, text="Telefone:", font=("Arial", 10, "bold")).pack(anchor=tk.W)
        self.cliente_telefone_var = tk.StringVar(value=self.cliente_telefone or "")
        telefone_entry = ttk.Entry(cliente_frame, textvariable=self.cliente_telefone_var, 
                                  font=("Arial", 12), width=40)
        telefone_entry.pack(fill=tk.X, pady=(5, 0))
        
        # Informa√ß√µes do pedido
        pedido_frame = ttk.LabelFrame(main_frame, text="Dados do Pedido", padding="15")
        pedido_frame.pack(fill=tk.X, pady=(0, 15))
        
        # Produto
        ttk.Label(pedido_frame, text="Produto:", font=("Arial", 10, "bold")).pack(anchor=tk.W)
        self.produto_var = tk.StringVar(value=self.produto)
        produto_entry = ttk.Entry(pedido_frame, textvariable=self.produto_var, 
                                 font=("Arial", 12), width=40)
        produto_entry.pack(fill=tk.X, pady=(5, 10))
        
        # Quantidade e pre√ßo na mesma linha
        qtd_preco_frame = ttk.Frame(pedido_frame)
        qtd_preco_frame.pack(fill=tk.X, pady=(0, 10))
        
        # Quantidade
        qtd_frame = ttk.Frame(qtd_preco_frame)
        qtd_frame.pack(side=tk.LEFT, fill=tk.X, expand=True, padx=(0, 10))
        ttk.Label(qtd_frame, text="Quantidade:", font=("Arial", 10, "bold")).pack(anchor=tk.W)
        self.quantidade_var = tk.StringVar(value=str(self.quantidade))
        qtd_entry = ttk.Entry(qtd_frame, textvariable=self.quantidade_var, 
                             font=("Arial", 12), width=15)
        qtd_entry.pack(fill=tk.X, pady=(5, 0))
        qtd_entry.bind('<KeyRelease>', self.calcular_total)
        
        # Pre√ßo unit√°rio
        preco_frame = ttk.Frame(qtd_preco_frame)
        preco_frame.pack(side=tk.LEFT, fill=tk.X, expand=True)
        ttk.Label(preco_frame, text="Pre√ßo Unit√°rio:", font=("Arial", 10, "bold")).pack(anchor=tk.W)
        self.preco_unitario_var = tk.StringVar(value=f"{self.preco_unitario:.2f}")
        preco_entry = ttk.Entry(preco_frame, textvariable=self.preco_unitario_var, 
                               font=("Arial", 12), width=15)
        preco_entry.pack(fill=tk.X, pady=(5, 0))
        preco_entry.bind('<KeyRelease>', self.calcular_total)
        
        # Total (calculado automaticamente)
        ttk.Label(pedido_frame, text="Total:", font=("Arial", 10, "bold")).pack(anchor=tk.W, pady=(10, 0))
        self.total_var = tk.StringVar(value=f"R$ {self.total:.2f}")
        total_label = ttk.Label(pedido_frame, textvariable=self.total_var, 
                               font=("Arial", 14, "bold"), foreground="#2E8B57")
        total_label.pack(anchor=tk.W, pady=(5, 0))
        
        # Datas
        datas_frame = ttk.LabelFrame(main_frame, text="Datas", padding="15")
        datas_frame.pack(fill=tk.X, pady=(0, 15))
        
        # Data de vencimento
        ttk.Label(datas_frame, text="Data de Vencimento (DD/MM/AAAA):", font=("Arial", 10, "bold")).pack(anchor=tk.W)
        self.data_vencimento_var = tk.StringVar(value=self.data_vencimento or "")
        venc_entry = ttk.Entry(datas_frame, textvariable=self.data_vencimento_var, 
                              font=("Arial", 12), width=20)
        venc_entry.pack(anchor=tk.W, pady=(5, 10))
        
        # Observa√ß√µes
        obs_frame = ttk.LabelFrame(main_frame, text="Observa√ß√µes", padding="15")
        obs_frame.pack(fill=tk.X, pady=(0, 20))
        
        self.observacoes_var = tk.StringVar(value=self.observacoes or "")
        obs_entry = ttk.Entry(obs_frame, textvariable=self.observacoes_var, 
                             font=("Arial", 12), width=40)
        obs_entry.pack(fill=tk.X)
        
        # Bot√µes
        btn_frame = ttk.Frame(main_frame)
        btn_frame.pack(fill=tk.X, pady=(20, 0))
        
        ttk.Button(btn_frame, text="üíæ Salvar", command=self.salvar_alteracoes, 
                  width=15).pack(side=tk.LEFT, padx=(0, 10))
        ttk.Button(btn_frame, text="‚ùå Cancelar", command=self.window.destroy, 
                  width=15).pack(side=tk.RIGHT)
        
        # Focar no primeiro campo
        nome_entry.focus()
        nome_entry.select_range(0, tk.END)
        
        # Atalhos
        self.window.bind('<Escape>', lambda e: self.window.destroy())
        self.window.bind('<Control-s>', lambda e: self.salvar_alteracoes())
    
    def calcular_total(self, event=None):
        """Calcular total automaticamente"""
        try:
            quantidade = float(self.quantidade_var.get() or 0)
            preco_unitario = float(self.preco_unitario_var.get() or 0)
            total = quantidade * preco_unitario
            self.total_var.set(f"R$ {total:.2f}")
        except ValueError:
            self.total_var.set("R$ 0,00")
    
    def salvar_alteracoes(self):
        """Salvar altera√ß√µes no banco"""
        # Validar campos obrigat√≥rios
        if not self.cliente_nome_var.get().strip():
            messagebox.showerror("Erro", "Nome do cliente √© obrigat√≥rio")
            return
        
        if not self.produto_var.get().strip():
            messagebox.showerror("Erro", "Produto √© obrigat√≥rio")
            return
        
        try:
            quantidade = float(self.quantidade_var.get())
            preco_unitario = float(self.preco_unitario_var.get())
            
            if quantidade <= 0 or preco_unitario <= 0:
                messagebox.showerror("Erro", "Quantidade e pre√ßo devem ser maiores que zero")
                return
        except ValueError:
            messagebox.showerror("Erro", "Quantidade e pre√ßo devem ser n√∫meros v√°lidos")
            return
        
        # Calcular novo total
        novo_total = quantidade * preco_unitario
        
        # Validar data de vencimento se fornecida
        data_venc = self.data_vencimento_var.get().strip()
        if data_venc:
            try:
                datetime.strptime(data_venc, "%d/%m/%Y")
            except ValueError:
                messagebox.showerror("Erro", "Data de vencimento deve estar no formato DD/MM/AAAA")
                return
        
        # Confirmar altera√ß√µes
        msg = f"Salvar altera√ß√µes?\n\n"
        msg += f"Cliente: {self.cliente_nome_var.get()}\n"
        msg += f"Produto: {self.produto_var.get()}\n"
        msg += f"Quantidade: {quantidade}\n"
        msg += f"Pre√ßo: R$ {preco_unitario:.2f}\n"
        msg += f"Total: R$ {novo_total:.2f}"
        
        if messagebox.askyesno("Confirmar Altera√ß√µes", msg):
            try:
                with sqlite3.connect(self.db.db_path) as conn:
                    cursor = conn.cursor()
                    cursor.execute("""
                        UPDATE contas_abertas 
                        SET cliente_nome = ?, cliente_telefone = ?, produto = ?, 
                            quantidade = ?, preco_unitario = ?, total = ?, 
                            data_vencimento = ?, observacoes = ?
                        WHERE id = ?
                    """, (
                        self.cliente_nome_var.get().strip(),
                        self.cliente_telefone_var.get().strip() or None,
                        self.produto_var.get().strip(),
                        quantidade,
                        preco_unitario,
                        novo_total,
                        data_venc or None,
                        self.observacoes_var.get().strip() or None,
                        self.conta_id
                    ))
                    conn.commit()
                
                messagebox.showinfo("Sucesso", "Conta editada com sucesso!")
                self.resultado = True
                self.window.destroy()
                
            except Exception as e:
                messagebox.showerror("Erro", f"Erro ao salvar altera√ß√µes: {e}")

class RelatoriosWindow:
    """Janela de relat√≥rios completos"""
    
    def __init__(self, parent, db):
        self.parent = parent
        self.db = db
        
        self.window = tk.Toplevel(parent)
        self.window.title("üìÑ Relat√≥rios Gerenciais")
        self.window.geometry("800x600")
        self.window.transient(parent)
        self.window.grab_set()
        centralizar_janela(self.window)
        
        self.setup_ui()
    
    def setup_ui(self):
        """Configurar interface"""
        main_frame = ttk.Frame(self.window, padding="20")
        main_frame.pack(fill=tk.BOTH, expand=True)
        
        # T√≠tulo
        titulo = ttk.Label(main_frame, text="üìÑ Relat√≥rios Gerenciais", 
                          font=("Arial", 18, "bold"))
        titulo.pack(pady=(0, 30))
        
        # Descri√ß√£o
        desc = ttk.Label(main_frame, 
                        text="Selecione o tipo de relat√≥rio que deseja gerar:",
                        font=("Arial", 12))
        desc.pack(pady=(0, 20))
        
        # Frame dos bot√µes de relat√≥rios
        relatorios_frame = ttk.Frame(main_frame)
        relatorios_frame.pack(fill=tk.BOTH, expand=True, pady=(0, 20))
        
        # Organizar em grid 2x3
        self.criar_botao_relatorio(relatorios_frame, 0, 0,
                                  "üìä Vendas Di√°rias", 
                                  "Relat√≥rio detalhado das vendas do dia",
                                  self.relatorio_vendas_diarias)
        
        self.criar_botao_relatorio(relatorios_frame, 0, 1,
                                  "üìà Vendas por Per√≠odo", 
                                  "Relat√≥rio de vendas entre datas espec√≠ficas",
                                  self.relatorio_vendas_periodo)
        
        self.criar_botao_relatorio(relatorios_frame, 1, 0,
                                  "üèÜ Produtos Mais Vendidos", 
                                  "Ranking dos produtos por quantidade",
                                  self.relatorio_produtos_vendidos)
        
        self.criar_botao_relatorio(relatorios_frame, 1, 1,
                                  "üí∞ An√°lise Financeira", 
                                  "Resumo financeiro completo",
                                  self.relatorio_financeiro)
        
        self.criar_botao_relatorio(relatorios_frame, 2, 0,
                                  "üì¶ Relat√≥rio de Estoque", 
                                  "Situa√ß√£o atual do estoque",
                                  self.relatorio_estoque)
        
        self.criar_botao_relatorio(relatorios_frame, 2, 1,
                                  "üè™ Contas em Aberto", 
                                  "Relat√≥rio de credi√°rio e pend√™ncias",
                                  self.relatorio_contas_abertas)
        
        # Bot√£o fechar
        ttk.Button(main_frame, text="‚ùå Fechar", command=self.window.destroy, 
                  width=15).pack(pady=20)
    
    def criar_botao_relatorio(self, parent, row, col, titulo, descricao, comando):
        """Criar bot√£o de relat√≥rio estilizado"""
        frame = ttk.LabelFrame(parent, text=titulo, padding="15")
        frame.grid(row=row, column=col, padx=10, pady=10, sticky="nsew")
        
        # Configurar grid
        parent.grid_rowconfigure(row, weight=1)
        parent.grid_columnconfigure(col, weight=1)
        
        # Descri√ß√£o
        ttk.Label(frame, text=descricao, font=("Arial", 10), 
                 wraplength=200, justify=tk.CENTER).pack(pady=(0, 15))
        
        # Bot√£o
        ttk.Button(frame, text="üìã Gerar Relat√≥rio", command=comando, 
                  width=20).pack()
    
    def relatorio_vendas_diarias(self):
        """Gerar relat√≥rio de vendas di√°rias"""
        try:
            hoje = datetime.now().strftime("%d/%m/%Y")
            
            with sqlite3.connect(self.db.db_path) as conn:
                cursor = conn.cursor()
                
                # Buscar vendas do dia
                cursor.execute("""
                    SELECT produto, quantidade, preco_unitario, total, 
                           time(data_venda) as hora_venda
                    FROM historico_vendas 
                    WHERE date(data_venda) = date('now')
                    ORDER BY data_venda DESC
                """)
                vendas = cursor.fetchall()
                
                if not vendas:
                    messagebox.showinfo("Relat√≥rio Vazio", "Nenhuma venda registrada hoje")
                    return
                
                # Calcular totais
                total_vendas = len(vendas)
                receita_total = sum(venda[3] for venda in vendas)
                ticket_medio = receita_total / total_vendas if total_vendas > 0 else 0
                
                # Criar relat√≥rio
                relatorio = f"""
üìä RELAT√ìRIO DE VENDAS DI√ÅRIAS
Data: {hoje}
{'='*50}

üí∞ RESUMO FINANCEIRO:
‚Ä¢ Total de Vendas: {total_vendas}
‚Ä¢ Receita Total: R$ {receita_total:.2f}
‚Ä¢ Ticket M√©dio: R$ {ticket_medio:.2f}

üìã VENDAS DETALHADAS:
"""
                
                for i, (produto, qtd, preco, total, hora) in enumerate(vendas, 1):
                    relatorio += f"{i:2d}. {produto:<20} | Qtd: {qtd:2d} | "
                    relatorio += f"Pre√ßo: R$ {preco:6.2f} | Total: R$ {total:7.2f} | {hora}\n"
                
                self.mostrar_relatorio("Vendas Di√°rias", relatorio)
                
        except Exception as e:
            messagebox.showerror("Erro", f"Erro ao gerar relat√≥rio: {e}")
    
    def relatorio_vendas_periodo(self):
        """Gerar relat√≥rio de vendas por per√≠odo"""
        PeriodoDialog(self.window, self.db)
    
    def relatorio_produtos_vendidos(self):
        """Gerar relat√≥rio de produtos mais vendidos"""
        try:
            with sqlite3.connect(self.db.db_path) as conn:
                cursor = conn.cursor()
                
                # Buscar produtos mais vendidos
                cursor.execute("""
                    SELECT produto, SUM(quantidade) as total_vendido, 
                           SUM(total) as receita_total, COUNT(*) as num_vendas
                    FROM historico_vendas 
                    GROUP BY produto
                    ORDER BY total_vendido DESC
                    LIMIT 20
                """)
                produtos = cursor.fetchall()
                
                if not produtos:
                    messagebox.showinfo("Relat√≥rio Vazio", "Nenhuma venda registrada")
                    return
                
                relatorio = f"""
üèÜ TOP 20 PRODUTOS MAIS VENDIDOS
{'='*60}

{'Posi√ß√£o':<8} {'Produto':<25} {'Qtd':<8} {'Receita':<12} {'Vendas':<8}
{'-'*60}
"""
                
                for i, (produto, qtd, receita, vendas) in enumerate(produtos, 1):
                    relatorio += f"{i:2d}¬∫      {produto:<25} {qtd:<8} R$ {receita:<8.2f} {vendas:<8}\n"
                
                self.mostrar_relatorio("Produtos Mais Vendidos", relatorio)
                
        except Exception as e:
            messagebox.showerror("Erro", f"Erro ao gerar relat√≥rio: {e}")
    
    def relatorio_financeiro(self):
        """Gerar relat√≥rio financeiro completo"""
        try:
            hoje = datetime.now().strftime("%d/%m/%Y")
            mes_atual = datetime.now().strftime("%m/%Y")
            
            with sqlite3.connect(self.db.db_path) as conn:
                cursor = conn.cursor()
                
                # Vendas de hoje
                cursor.execute("""
                    SELECT COUNT(*), COALESCE(SUM(total), 0)
                    FROM historico_vendas 
                    WHERE date(data_venda) = date('now')
                """)
                vendas_hoje, receita_hoje = cursor.fetchone()
                
                # Vendas do m√™s
                cursor.execute("""
                    SELECT COUNT(*), COALESCE(SUM(total), 0)
                    FROM historico_vendas 
                    WHERE strftime('%m/%Y', data_venda) = ?
                """, (mes_atual,))
                vendas_mes, receita_mes = cursor.fetchone()
                
                # Contas em aberto
                cursor.execute("""
                    SELECT COUNT(*), COALESCE(SUM(total), 0)
                    FROM contas_abertas 
                    WHERE pago = 0
                """)
                contas_pendentes, valor_pendente = cursor.fetchone()
                
                # Valor do estoque
                cursor.execute("""
                    SELECT COALESCE(SUM(quantidade * preco), 0)
                    FROM estoque
                """)
                valor_estoque = cursor.fetchone()[0]
                
                relatorio = f"""
üí∞ RELAT√ìRIO FINANCEIRO COMPLETO
Data: {hoje}
{'='*50}

üìà DESEMPENHO HOJE:
‚Ä¢ Vendas: {vendas_hoje or 0}
‚Ä¢ Receita: R$ {receita_hoje or 0:.2f}
‚Ä¢ Ticket M√©dio: R$ {(receita_hoje/vendas_hoje if vendas_hoje > 0 else 0):.2f}

üìä DESEMPENHO DO M√äS:
‚Ä¢ Vendas: {vendas_mes or 0}
‚Ä¢ Receita: R$ {receita_mes or 0:.2f}
‚Ä¢ M√©dia Di√°ria: R$ {(receita_mes/30 if receita_mes > 0 else 0):.2f}

üí≥ CONTAS EM ABERTO:
‚Ä¢ Contas Pendentes: {contas_pendentes or 0}
‚Ä¢ Valor a Receber: R$ {valor_pendente or 0:.2f}

üì¶ PATRIM√îNIO:
‚Ä¢ Valor do Estoque: R$ {valor_estoque or 0:.2f}

üíé RESUMO GERAL:
‚Ä¢ Receita Realizada (M√™s): R$ {receita_mes or 0:.2f}
‚Ä¢ Receita Pendente: R$ {valor_pendente or 0:.2f}
‚Ä¢ Patrim√¥nio em Estoque: R$ {valor_estoque or 0:.2f}
‚Ä¢ Total Potencial: R$ {(receita_mes or 0) + (valor_pendente or 0) + (valor_estoque or 0):.2f}
"""
                
                self.mostrar_relatorio("An√°lise Financeira", relatorio)
                
        except Exception as e:
            messagebox.showerror("Erro", f"Erro ao gerar relat√≥rio: {e}")
    
    def relatorio_estoque(self):
        """Gerar relat√≥rio de estoque"""
        try:
            with sqlite3.connect(self.db.db_path) as conn:
                cursor = conn.cursor()
                
                cursor.execute("""
                    SELECT produto, categoria, quantidade, preco, 
                           (quantidade * preco) as valor_total
                    FROM estoque 
                    ORDER BY categoria, produto
                """)
                produtos = cursor.fetchall()
                
                if not produtos:
                    messagebox.showinfo("Relat√≥rio Vazio", "Nenhum produto no estoque")
                    return
                
                # Agrupar por categoria
                categorias = {}
                total_geral = 0
                
                for produto, categoria, qtd, preco, valor in produtos:
                    if categoria not in categorias:
                        categorias[categoria] = []
                    categorias[categoria].append((produto, qtd, preco, valor))
                    total_geral += valor
                
                relatorio = f"""
üì¶ RELAT√ìRIO DE ESTOQUE COMPLETO
Data: {datetime.now().strftime("%d/%m/%Y %H:%M")}
{'='*70}

"""
                
                for categoria, itens in categorias.items():
                    relatorio += f"\nüè∑Ô∏è {categoria.upper()}\n"
                    relatorio += f"{'Produto':<30} {'Qtd':<8} {'Pre√ßo':<12} {'Valor Total':<12}\n"
                    relatorio += f"{'-'*62}\n"
                    
                    total_categoria = 0
                    for produto, qtd, preco, valor in itens:
                        relatorio += f"{produto:<30} {qtd:<8} R$ {preco:<8.2f} R$ {valor:<8.2f}\n"
                        total_categoria += valor
                    
                    relatorio += f"{'-'*62}\n"
                    relatorio += f"{'TOTAL DA CATEGORIA:':<50} R$ {total_categoria:.2f}\n"
                
                relatorio += f"\n{'='*70}\n"
                relatorio += f"üíé VALOR TOTAL DO ESTOQUE: R$ {total_geral:.2f}\n"
                
                self.mostrar_relatorio("Relat√≥rio de Estoque", relatorio)
                
        except Exception as e:
            messagebox.showerror("Erro", f"Erro ao gerar relat√≥rio: {e}")
    
    def relatorio_contas_abertas(self):
        """Gerar relat√≥rio de contas em aberto"""
        try:
            with sqlite3.connect(self.db.db_path) as conn:
                cursor = conn.cursor()
                
                cursor.execute("""
                    SELECT cliente_nome, cliente_telefone, produto, quantidade,
                           total, data_venda, data_vencimento, pago
                    FROM contas_abertas 
                    ORDER BY pago ASC, data_vencimento ASC, cliente_nome
                """)
                contas = cursor.fetchall()
                
                if not contas:
                    messagebox.showinfo("Relat√≥rio Vazio", "Nenhuma conta em aberto")
                    return
                
                pendentes = [c for c in contas if not c[7]]
                pagas = [c for c in contas if c[7]]
                
                relatorio = f"""
üè™ RELAT√ìRIO DE CONTAS EM ABERTO
Data: {datetime.now().strftime("%d/%m/%Y %H:%M")}
{'='*80}

‚è∞ CONTAS PENDENTES ({len(pendentes)}):
"""
                
                total_pendente = 0
                if pendentes:
                    relatorio += f"{'Cliente':<25} {'Produto':<20} {'Qtd':<5} {'Valor':<10} {'Vencimento':<12}\n"
                    relatorio += f"{'-'*72}\n"
                    
                    for cliente, tel, produto, qtd, total, data_venda, venc, pago in pendentes:
                        venc_str = venc if venc else "Sem prazo"
                        relatorio += f"{cliente[:24]:<25} {produto[:19]:<20} {qtd:<5} R$ {total:<6.2f} {venc_str:<12}\n"
                        total_pendente += total
                
                relatorio += f"\nüí∞ Total Pendente: R$ {total_pendente:.2f}\n"
                
                if pagas:
                    relatorio += f"\n‚úÖ CONTAS PAGAS ({len(pagas)}):\n"
                    total_pago = sum(c[4] for c in pagas)
                    relatorio += f"üíö Total Pago: R$ {total_pago:.2f}\n"
                
                relatorio += f"\nüìä RESUMO GERAL:\n"
                relatorio += f"‚Ä¢ Contas Pendentes: {len(pendentes)}\n"
                relatorio += f"‚Ä¢ Contas Pagas: {len(pagas)}\n"
                relatorio += f"‚Ä¢ Total a Receber: R$ {total_pendente:.2f}\n"
                
                self.mostrar_relatorio("Contas em Aberto", relatorio)
                
        except Exception as e:
            messagebox.showerror("Erro", f"Erro ao gerar relat√≥rio: {e}")
    
    def mostrar_relatorio(self, titulo, conteudo):
        """Mostrar relat√≥rio em janela"""
        RelatorioVisualizadorWindow(self.window, titulo, conteudo)

class PeriodoDialog:
    """Di√°logo para selecionar per√≠odo de relat√≥rio"""
    
    def __init__(self, parent, db):
        self.parent = parent
        self.db = db
        
        self.window = tk.Toplevel(parent)
        self.window.title("üìÖ Selecionar Per√≠odo")
        self.window.geometry("400x300")
        self.window.transient(parent)
        self.window.grab_set()
        centralizar_janela(self.window)
        
        self.setup_ui()
    
    def setup_ui(self):
        """Configurar interface"""
        main_frame = ttk.Frame(self.window, padding="20")
        main_frame.pack(fill=tk.BOTH, expand=True)
        
        # T√≠tulo
        ttk.Label(main_frame, text="üìÖ Selecionar Per√≠odo para Relat√≥rio", 
                 font=("Arial", 14, "bold")).pack(pady=(0, 20))
        
        # Data inicial
        ttk.Label(main_frame, text="Data Inicial (DD/MM/AAAA):", 
                 font=("Arial", 10, "bold")).pack(anchor=tk.W)
        self.data_inicial_var = tk.StringVar()
        ttk.Entry(main_frame, textvariable=self.data_inicial_var, 
                 font=("Arial", 12), width=15).pack(pady=(5, 15))
        
        # Data final
        ttk.Label(main_frame, text="Data Final (DD/MM/AAAA):", 
                 font=("Arial", 10, "bold")).pack(anchor=tk.W)
        self.data_final_var = tk.StringVar()
        ttk.Entry(main_frame, textvariable=self.data_final_var, 
                 font=("Arial", 12), width=15).pack(pady=(5, 20))
        
        # Sugest√µes r√°pidas
        sugestoes_frame = ttk.LabelFrame(main_frame, text="Per√≠odos R√°pidos", padding="10")
        sugestoes_frame.pack(fill=tk.X, pady=(0, 20))
        
        ttk.Button(sugestoes_frame, text="Hoje", 
                  command=self.periodo_hoje, width=12).pack(side=tk.LEFT, padx=(0, 5))
        ttk.Button(sugestoes_frame, text="Esta Semana", 
                  command=self.periodo_semana, width=12).pack(side=tk.LEFT, padx=(0, 5))
        ttk.Button(sugestoes_frame, text="Este M√™s", 
                  command=self.periodo_mes, width=12).pack(side=tk.LEFT)
        
        # Bot√µes
        btn_frame = ttk.Frame(main_frame)
        btn_frame.pack(fill=tk.X, pady=20)
        
        ttk.Button(btn_frame, text="üìä Gerar Relat√≥rio", 
                  command=self.gerar_relatorio, width=15).pack(side=tk.LEFT, padx=(0, 10))
        ttk.Button(btn_frame, text="‚ùå Cancelar", 
                  command=self.window.destroy, width=15).pack(side=tk.RIGHT)
    
    def periodo_hoje(self):
        """Definir per√≠odo para hoje"""
        hoje = datetime.now().strftime("%d/%m/%Y")
        self.data_inicial_var.set(hoje)
        self.data_final_var.set(hoje)
    
    def periodo_semana(self):
        """Definir per√≠odo para esta semana"""
        hoje = datetime.now()
        inicio_semana = hoje - timedelta(days=hoje.weekday())
        fim_semana = inicio_semana + timedelta(days=6)
        
        self.data_inicial_var.set(inicio_semana.strftime("%d/%m/%Y"))
        self.data_final_var.set(fim_semana.strftime("%d/%m/%Y"))
    
    def periodo_mes(self):
        """Definir per√≠odo para este m√™s"""
        hoje = datetime.now()
        inicio_mes = hoje.replace(day=1)
        
        # √öltimo dia do m√™s
        if hoje.month == 12:
            fim_mes = hoje.replace(year=hoje.year + 1, month=1, day=1) - timedelta(days=1)
        else:
            fim_mes = hoje.replace(month=hoje.month + 1, day=1) - timedelta(days=1)
        
        self.data_inicial_var.set(inicio_mes.strftime("%d/%m/%Y"))
        self.data_final_var.set(fim_mes.strftime("%d/%m/%Y"))
    
    def gerar_relatorio(self):
        """Gerar relat√≥rio do per√≠odo"""
        data_inicial = self.data_inicial_var.get().strip()
        data_final = self.data_final_var.get().strip()
        
        if not data_inicial or not data_final:
            messagebox.showerror("Erro", "Preencha ambas as datas")
            return
        
        try:
            # Validar datas
            datetime.strptime(data_inicial, "%d/%m/%Y")
            datetime.strptime(data_final, "%d/%m/%Y")
            
            with sqlite3.connect(self.db.db_path) as conn:
                cursor = conn.cursor()
                
                # Buscar vendas do per√≠odo
                cursor.execute("""
                    SELECT produto, quantidade, preco_unitario, total, 
                           date(data_venda) as data_venda
                    FROM historico_vendas 
                    WHERE date(data_venda) BETWEEN date(?) AND date(?)
                    ORDER BY data_venda DESC, produto
                """, (self.converter_data_sql(data_inicial), self.converter_data_sql(data_final)))
                
                vendas = cursor.fetchall()
                
                if not vendas:
                    messagebox.showinfo("Relat√≥rio Vazio", f"Nenhuma venda no per√≠odo de {data_inicial} a {data_final}")
                    return
                
                # Calcular estat√≠sticas
                total_vendas = len(vendas)
                receita_total = sum(venda[3] for venda in vendas)
                ticket_medio = receita_total / total_vendas if total_vendas > 0 else 0
                
                # Agrupar por produto
                produtos_resumo = {}
                for produto, qtd, preco, total, data in vendas:
                    if produto not in produtos_resumo:
                        produtos_resumo[produto] = {'qtd': 0, 'receita': 0, 'vendas': 0}
                    produtos_resumo[produto]['qtd'] += qtd
                    produtos_resumo[produto]['receita'] += total
                    produtos_resumo[produto]['vendas'] += 1
                
                relatorio = f"""
üìä RELAT√ìRIO DE VENDAS POR PER√çODO
Per√≠odo: {data_inicial} a {data_final}
{'='*60}

üí∞ RESUMO FINANCEIRO:
‚Ä¢ Total de Vendas: {total_vendas}
‚Ä¢ Receita Total: R$ {receita_total:.2f}
‚Ä¢ Ticket M√©dio: R$ {ticket_medio:.2f}

üèÜ PRODUTOS MAIS VENDIDOS NO PER√çODO:
{'Produto':<25} {'Qtd':<8} {'Receita':<12} {'Vendas':<8}
{'-'*53}
"""
                
                # Ordenar produtos por receita
                produtos_ordenados = sorted(produtos_resumo.items(), 
                                          key=lambda x: x[1]['receita'], reverse=True)
                
                for produto, dados in produtos_ordenados:
                    relatorio += f"{produto[:24]:<25} {dados['qtd']:<8} R$ {dados['receita']:<8.2f} {dados['vendas']:<8}\n"
                
                # Mostrar relat√≥rio
                RelatorioVisualizadorWindow(self.window, f"Vendas - {data_inicial} a {data_final}", relatorio)
                self.window.destroy()
                
        except ValueError:
            messagebox.showerror("Erro", "Formato de data inv√°lido. Use DD/MM/AAAA")
        except Exception as e:
            messagebox.showerror("Erro", f"Erro ao gerar relat√≥rio: {e}")
    
    def converter_data_sql(self, data_str):
        """Converter data DD/MM/AAAA para formato SQL"""
        dia, mes, ano = data_str.split('/')
        return f"{ano}-{mes.zfill(2)}-{dia.zfill(2)}"

class RelatorioVisualizadorWindow:
    """Janela para visualizar relat√≥rios"""
    
    def __init__(self, parent, titulo, conteudo):
        self.window = tk.Toplevel(parent)
        self.window.title(f"üìÑ {titulo}")
        self.window.geometry("900x700")
        self.window.transient(parent)
        centralizar_janela(self.window)
        
        self.setup_ui(titulo, conteudo)
    
    def setup_ui(self, titulo, conteudo):
        """Configurar interface"""
        main_frame = ttk.Frame(self.window, padding="10")
        main_frame.pack(fill=tk.BOTH, expand=True)
        
        # Cabe√ßalho
        header_frame = ttk.Frame(main_frame)
        header_frame.pack(fill=tk.X, pady=(0, 10))
        
        ttk.Label(header_frame, text=f"üìÑ {titulo}", 
                 font=("Arial", 16, "bold")).pack(side=tk.LEFT)
        
        # Bot√µes
        ttk.Button(header_frame, text="üíæ Salvar", 
                  command=lambda: self.salvar_relatorio(titulo, conteudo), 
                  width=12).pack(side=tk.RIGHT, padx=(5, 0))
        ttk.Button(header_frame, text="üñ®Ô∏è Imprimir", 
                  command=lambda: self.imprimir_relatorio(conteudo), 
                  width=12).pack(side=tk.RIGHT, padx=(5, 0))
        
        # √Årea de texto
        text_frame = ttk.Frame(main_frame)
        text_frame.pack(fill=tk.BOTH, expand=True)
        
        # Text widget com scrollbar
        self.text_widget = tk.Text(text_frame, font=("Courier New", 10), 
                                  wrap=tk.NONE, bg="#f8f9fa")
        scrollbar_v = ttk.Scrollbar(text_frame, orient=tk.VERTICAL, command=self.text_widget.yview)
        scrollbar_h = ttk.Scrollbar(text_frame, orient=tk.HORIZONTAL, command=self.text_widget.xview)
        
        self.text_widget.configure(yscrollcommand=scrollbar_v.set, xscrollcommand=scrollbar_h.set)
        
        self.text_widget.grid(row=0, column=0, sticky="nsew")
        scrollbar_v.grid(row=0, column=1, sticky="ns")
        scrollbar_h.grid(row=1, column=0, sticky="ew")
        
        text_frame.grid_rowconfigure(0, weight=1)
        text_frame.grid_columnconfigure(0, weight=1)
        
        # Inserir conte√∫do
        self.text_widget.insert("1.0", conteudo)
        self.text_widget.config(state=tk.DISABLED)
        
        # Bot√£o fechar
        ttk.Button(main_frame, text="‚ùå Fechar", command=self.window.destroy, 
                  width=15).pack(pady=10)
    
    def salvar_relatorio(self, titulo, conteudo):
        """Salvar relat√≥rio em arquivo"""
        try:
            import os
            from tkinter import filedialog
            
            # Criar pasta de relat√≥rios
            os.makedirs("data/relatorios", exist_ok=True)
            
            # Nome padr√£o do arquivo
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            nome_arquivo = f"relatorio_{titulo.replace(' ', '_')}_{timestamp}.txt"
            
            # Di√°logo para salvar
            arquivo = filedialog.asksaveasfilename(
                defaultextension=".txt",
                filetypes=[("Arquivo de Texto", "*.txt"), ("Todos os Arquivos", "*.*")],
                initialdir="data/relatorios",
                initialfilename=nome_arquivo,
                title="Salvar Relat√≥rio"
            )
            
            if arquivo:
                with open(arquivo, 'w', encoding='utf-8') as f:
                    f.write(conteudo)
                messagebox.showinfo("Sucesso", f"Relat√≥rio salvo em:\n{arquivo}")
                
        except Exception as e:
            messagebox.showerror("Erro", f"Erro ao salvar relat√≥rio: {e}")
    
    def imprimir_relatorio(self, conteudo):
        """Simular impress√£o do relat√≥rio"""
        messagebox.showinfo("Imprimir", 
                           "Para imprimir o relat√≥rio:\n\n"
                           "1. Salve o relat√≥rio em arquivo\n"
                           "2. Abra o arquivo em um editor de texto\n"
                           "3. Use Ctrl+P para imprimir\n\n"
                           "Ou copie o conte√∫do da tela e cole em seu programa favorito")

class CaixaWindow:
    """Janela de controle de caixa"""
    
    def __init__(self, parent, db):
        self.parent = parent
        self.db = db
        
        self.window = tk.Toplevel(parent)
        self.window.title("üí≥ Controle de Caixa")
        self.window.geometry("900x700")
        self.window.transient(parent)
        self.window.grab_set()
        centralizar_janela(self.window)
        
        self.setup_ui()
        self.verificar_caixa_aberto()
    
    def setup_ui(self):
        """Configurar interface"""
        main_frame = ttk.Frame(self.window, padding="15")
        main_frame.pack(fill=tk.BOTH, expand=True)
        
        # T√≠tulo
        title = ttk.Label(main_frame, text="üí≥ Controle de Caixa", font=("Arial", 16, "bold"))
        title.pack(pady=(0, 15))
        
        # Frame status do caixa
        self.status_frame = ttk.LabelFrame(main_frame, text="Status do Caixa", padding="15")
        self.status_frame.pack(fill=tk.X, pady=(0, 15))
        
        # Status inicial
        self.status_label = ttk.Label(self.status_frame, text="Verificando status...", font=("Arial", 12, "bold"))
        self.status_label.pack()
        
        # Frame a√ß√µes
        self.acoes_frame = ttk.LabelFrame(main_frame, text="A√ß√µes do Caixa", padding="15")
        self.acoes_frame.pack(fill=tk.X, pady=(0, 15))
        
        # Bot√µes de a√ß√£o (ser√£o criados dinamicamente)
        self.btn_frame = ttk.Frame(self.acoes_frame)
        self.btn_frame.pack(fill=tk.X)
        
        # Frame movimenta√ß√µes
        mov_frame = ttk.LabelFrame(main_frame, text="Movimenta√ß√µes do Dia", padding="10")
        mov_frame.pack(fill=tk.BOTH, expand=True, pady=(0, 15))
        
        # Treeview movimenta√ß√µes
        self.mov_tree = ttk.Treeview(mov_frame, columns=("tipo", "valor", "descricao", "hora", "funcionario"), show="headings", height=12)
        
        self.mov_tree.heading("tipo", text="Tipo")
        self.mov_tree.heading("valor", text="Valor")
        self.mov_tree.heading("descricao", text="Descri√ß√£o")
        self.mov_tree.heading("hora", text="Hora")
        self.mov_tree.heading("funcionario", text="Funcion√°rio")
        
        self.mov_tree.column("tipo", width=100)
        self.mov_tree.column("valor", width=100)
        self.mov_tree.column("descricao", width=250)
        self.mov_tree.column("hora", width=120)
        self.mov_tree.column("funcionario", width=120)
        
        # Scrollbar
        scrollbar_mov = ttk.Scrollbar(mov_frame, orient=tk.VERTICAL, command=self.mov_tree.yview)
        self.mov_tree.configure(yscrollcommand=scrollbar_mov.set)
        
        self.mov_tree.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)
        scrollbar_mov.pack(side=tk.RIGHT, fill=tk.Y)
        
        # Frame resumo
        resumo_frame = ttk.LabelFrame(main_frame, text="Resumo do Dia", padding="10")
        resumo_frame.pack(fill=tk.X)
        
        self.resumo_label = ttk.Label(resumo_frame, text="", font=("Arial", 10))
        self.resumo_label.pack()
        
        # Bot√£o fechar
        ttk.Button(main_frame, text="‚ùå Fechar", command=self.window.destroy, width=15).pack(pady=10)
    
    def verificar_caixa_aberto(self):
        """Verificar se h√° caixa aberto"""
        try:
            with sqlite3.connect(self.db.db_path) as conn:
                cursor = conn.cursor()
                cursor.execute("SELECT * FROM caixa WHERE status = 'ABERTO' ORDER BY data_abertura DESC LIMIT 1")
                caixa_aberto = cursor.fetchone()
                
                if caixa_aberto:
                    self.caixa_atual = caixa_aberto
                    self.mostrar_caixa_aberto()
                else:
                    self.caixa_atual = None
                    self.mostrar_caixa_fechado()
                    
                self.carregar_movimentacoes()
                self.atualizar_resumo()
                
        except Exception as e:
            messagebox.showerror("Erro", f"Erro ao verificar status do caixa: {e}")
    
    def mostrar_caixa_aberto(self):
        """Mostrar interface para caixa aberto"""
        self.status_label.config(text="üü¢ CAIXA ABERTO", foreground="green")
        
        # Limpar bot√µes existentes
        for widget in self.btn_frame.winfo_children():
            widget.destroy()
        
        # Bot√µes para caixa aberto
        ttk.Button(self.btn_frame, text="üí∞ Sangria", command=self.fazer_sangria, width=15).pack(side=tk.LEFT, padx=(0, 10))
        ttk.Button(self.btn_frame, text="‚ûï Refor√ßo", command=self.fazer_reforco, width=15).pack(side=tk.LEFT, padx=(0, 10))
        ttk.Button(self.btn_frame, text="üìä Relat√≥rio", command=self.gerar_relatorio, width=15).pack(side=tk.LEFT, padx=(0, 10))
        ttk.Button(self.btn_frame, text="üîí Fechar Caixa", command=self.fechar_caixa, width=15).pack(side=tk.RIGHT)
    
    def mostrar_caixa_fechado(self):
        """Mostrar interface para caixa fechado"""
        self.status_label.config(text="üî¥ CAIXA FECHADO", foreground="red")
        
        # Limpar bot√µes existentes
        for widget in self.btn_frame.winfo_children():
            widget.destroy()
        
        # Bot√£o para abrir caixa
        ttk.Button(self.btn_frame, text="üîì Abrir Caixa", command=self.abrir_caixa, width=20).pack()
    
    def abrir_caixa(self):
        """Abrir novo caixa"""
        dialog = AbrirCaixaDialog(self.window, self.db)
        if dialog.resultado:
            self.verificar_caixa_aberto()
    
    def fazer_sangria(self):
        """Fazer sangria do caixa"""
        dialog = MovimentacaoCaixaDialog(self.window, self.db, "SANGRIA", self.caixa_atual[0])
        if dialog.resultado:
            self.verificar_caixa_aberto()
    
    def fazer_reforco(self):
        """Fazer refor√ßo do caixa"""
        dialog = MovimentacaoCaixaDialog(self.window, self.db, "REFORCO", self.caixa_atual[0])
        if dialog.resultado:
            self.verificar_caixa_aberto()
    
    def fechar_caixa(self):
        """Fechar caixa atual"""
        dialog = FecharCaixaDialog(self.window, self.db, self.caixa_atual)
        if dialog.resultado:
            self.verificar_caixa_aberto()
    
    def gerar_relatorio(self):
        """Gerar relat√≥rio do caixa"""
        if not self.caixa_atual:
            messagebox.showerror("Erro", "Nenhum caixa aberto")
            return
        
        # Calcular valores
        try:
            with sqlite3.connect(self.db.db_path) as conn:
                cursor = conn.cursor()
                
                # Vendas do dia
                cursor.execute("SELECT SUM(total) FROM historico_vendas WHERE DATE(data_venda) = DATE('now')")
                vendas_dia = cursor.fetchone()[0] or 0
                
                # Movimenta√ß√µes
                cursor.execute("""
                    SELECT tipo, SUM(valor) FROM movimentacoes_caixa 
                    WHERE caixa_id = ? GROUP BY tipo
                """, (self.caixa_atual[0],))
                movimentacoes = dict(cursor.fetchall())
                
                sangria = movimentacoes.get('SANGRIA', 0)
                reforco = movimentacoes.get('REFORCO', 0)
                
                valor_inicial = self.caixa_atual[6]
                valor_teorico = valor_inicial + vendas_dia - sangria + reforco
                
                relatorio = f"""RELAT√ìRIO DE CAIXA
                
Data: {datetime.now().strftime('%d/%m/%Y %H:%M')}
Funcion√°rio: {self.caixa_atual[11]}

VALORES:
Valor Inicial: R$ {valor_inicial:.2f}
Vendas do Dia: R$ {vendas_dia:.2f}
Sangrias: R$ {sangria:.2f}
Refor√ßos: R$ {reforco:.2f}

VALOR TE√ìRICO EM CAIXA: R$ {valor_teorico:.2f}"""
                
                messagebox.showinfo("Relat√≥rio de Caixa", relatorio)
                
        except Exception as e:
            messagebox.showerror("Erro", f"Erro ao gerar relat√≥rio: {e}")
    
    def carregar_movimentacoes(self):
        """Carregar movimenta√ß√µes do dia"""
        # Limpar lista
        for item in self.mov_tree.get_children():
            self.mov_tree.delete(item)
        
        try:
            with sqlite3.connect(self.db.db_path) as conn:
                cursor = conn.cursor()
                
                if self.caixa_atual:
                    cursor.execute("""
                        SELECT tipo, valor, descricao, data_hora, funcionario 
                        FROM movimentacoes_caixa 
                        WHERE caixa_id = ? 
                        ORDER BY data_hora DESC
                    """, (self.caixa_atual[0],))
                else:
                    cursor.execute("""
                        SELECT tipo, valor, descricao, data_hora, funcionario 
                        FROM movimentacoes_caixa 
                        WHERE DATE(data_hora) = DATE('now')
                        ORDER BY data_hora DESC
                    """)
                
                movimentacoes = cursor.fetchall()
                
                for mov in movimentacoes:
                    tipo, valor, descricao, data_hora, funcionario = mov
                    
                    try:
                        hora_fmt = datetime.fromisoformat(data_hora).strftime("%H:%M")
                    except:
                        hora_fmt = data_hora
                    
                    self.mov_tree.insert("", "end", values=(
                        tipo,
                        f"R$ {valor:.2f}",
                        descricao or "",
                        hora_fmt,
                        funcionario
                    ))
                    
        except Exception as e:
            print(f"Erro ao carregar movimenta√ß√µes: {e}")
    
    def atualizar_resumo(self):
        """Atualizar resumo do caixa"""
        try:
            with sqlite3.connect(self.db.db_path) as conn:
                cursor = conn.cursor()
                
                # Vendas do dia
                cursor.execute("SELECT COUNT(*), SUM(total) FROM historico_vendas WHERE DATE(data_venda) = DATE('now')")
                count_vendas, total_vendas = cursor.fetchone()
                count_vendas = count_vendas or 0
                total_vendas = total_vendas or 0
                
                if self.caixa_atual:
                    resumo = f"Vendas hoje: {count_vendas} ({total_vendas:.2f}) | Caixa aberto √†s {self.caixa_atual[4][:16] if self.caixa_atual[4] else ''}"
                else:
                    resumo = f"Vendas hoje: {count_vendas} (R$ {total_vendas:.2f}) | Caixa fechado"
                
                self.resumo_label.config(text=resumo)
                
        except Exception as e:
            self.resumo_label.config(text="Erro ao calcular resumo")

class AbrirCaixaDialog:
    """Dialog para abrir caixa"""
    
    def __init__(self, parent, db):
        self.parent = parent
        self.db = db
        self.resultado = False
        
        self.dialog = tk.Toplevel(parent)
        self.dialog.title("üîì Abrir Caixa")
        self.dialog.geometry("400x300")
        self.dialog.transient(parent)
        self.dialog.grab_set()
        centralizar_janela(self.dialog)
        
        self.valor_inicial_var = tk.StringVar()
        self.funcionario_var = tk.StringVar()
        self.observacoes_var = tk.StringVar()
        
        self.setup_ui()
    
    def setup_ui(self):
        """Configurar interface"""
        main_frame = ttk.Frame(self.dialog, padding="20")
        main_frame.pack(fill=tk.BOTH, expand=True)
        
        ttk.Label(main_frame, text="üîì Abertura de Caixa", font=("Arial", 14, "bold")).pack(pady=(0, 20))
        
        # Formul√°rio
        form_frame = ttk.Frame(main_frame)
        form_frame.pack(fill=tk.X, pady=(0, 20))
        
        ttk.Label(form_frame, text="Valor Inicial (R$):").grid(row=0, column=0, sticky="w", pady=8)
        valor_entry = ttk.Entry(form_frame, textvariable=self.valor_inicial_var, width=20)
        valor_entry.grid(row=0, column=1, padx=(10, 0), pady=8, sticky="ew")
        valor_entry.focus()
        
        ttk.Label(form_frame, text="Funcion√°rio:").grid(row=1, column=0, sticky="w", pady=8)
        funcionario_entry = ttk.Entry(form_frame, textvariable=self.funcionario_var, width=20)
        funcionario_entry.grid(row=1, column=1, padx=(10, 0), pady=8, sticky="ew")
        
        ttk.Label(form_frame, text="Observa√ß√µes:").grid(row=2, column=0, sticky="w", pady=8)
        obs_entry = ttk.Entry(form_frame, textvariable=self.observacoes_var, width=20)
        obs_entry.grid(row=2, column=1, padx=(10, 0), pady=8, sticky="ew")
        
        form_frame.columnconfigure(1, weight=1)
        
        # Bot√µes
        btn_frame = ttk.Frame(main_frame)
        btn_frame.pack(fill=tk.X)
        
        ttk.Button(btn_frame, text="üîì Abrir", command=self.abrir, width=15).pack(side=tk.LEFT, padx=(0, 10))
        ttk.Button(btn_frame, text="‚ùå Cancelar", command=self.dialog.destroy, width=15).pack(side=tk.RIGHT)
        
        self.dialog.bind('<Return>', lambda e: self.abrir())
    
    def abrir(self):
        """Abrir o caixa"""
        try:
            valor_inicial = float(self.valor_inicial_var.get().replace(',', '.'))
            funcionario = self.funcionario_var.get().strip() or "Operador"
            observacoes = self.observacoes_var.get().strip()
            
            if valor_inicial < 0:
                messagebox.showerror("Erro", "Valor inicial n√£o pode ser negativo")
                return
            
            with sqlite3.connect(self.db.db_path) as conn:
                cursor = conn.cursor()
                cursor.execute("""
                    INSERT INTO caixa (valor_inicial, funcionario, observacoes)
                    VALUES (?, ?, ?)
                """, (valor_inicial, funcionario, observacoes))
                
                caixa_id = cursor.lastrowid
                
                # Registrar movimenta√ß√£o de abertura
                cursor.execute("""
                    INSERT INTO movimentacoes_caixa (caixa_id, tipo, valor, descricao, funcionario)
                    VALUES (?, 'ABERTURA', ?, 'Abertura de caixa', ?)
                """, (caixa_id, valor_inicial, funcionario))
                
                conn.commit()
            
            messagebox.showinfo("Sucesso", f"Caixa aberto com sucesso!\nValor inicial: R$ {valor_inicial:.2f}")
            self.resultado = True
            self.dialog.destroy()
            
        except ValueError:
            messagebox.showerror("Erro", "Valor inicial deve ser um n√∫mero v√°lido")
        except Exception as e:
            messagebox.showerror("Erro", f"Erro ao abrir caixa: {e}")

class MovimentacaoCaixaDialog:
    """Dialog para movimenta√ß√µes do caixa"""
    
    def __init__(self, parent, db, tipo, caixa_id):
        self.parent = parent
        self.db = db
        self.tipo = tipo
        self.caixa_id = caixa_id
        self.resultado = False
        
        self.dialog = tk.Toplevel(parent)
        self.dialog.title(f"üí∞ {tipo.title()}")
        self.dialog.geometry("400x250")
        self.dialog.transient(parent)
        self.dialog.grab_set()
        centralizar_janela(self.dialog)
        
        self.valor_var = tk.StringVar()
        self.descricao_var = tk.StringVar()
        self.funcionario_var = tk.StringVar()
        
        self.setup_ui()
    
    def setup_ui(self):
        """Configurar interface"""
        main_frame = ttk.Frame(self.dialog, padding="20")
        main_frame.pack(fill=tk.BOTH, expand=True)
        
        titulo = "üí∞ Sangria" if self.tipo == "SANGRIA" else "‚ûï Refor√ßo"
        ttk.Label(main_frame, text=titulo, font=("Arial", 14, "bold")).pack(pady=(0, 20))
        
        # Formul√°rio
        form_frame = ttk.Frame(main_frame)
        form_frame.pack(fill=tk.X, pady=(0, 20))
        
        ttk.Label(form_frame, text="Valor (R$):").grid(row=0, column=0, sticky="w", pady=8)
        valor_entry = ttk.Entry(form_frame, textvariable=self.valor_var, width=20)
        valor_entry.grid(row=0, column=1, padx=(10, 0), pady=8, sticky="ew")
        valor_entry.focus()
        
        ttk.Label(form_frame, text="Descri√ß√£o:").grid(row=1, column=0, sticky="w", pady=8)
        desc_entry = ttk.Entry(form_frame, textvariable=self.descricao_var, width=20)
        desc_entry.grid(row=1, column=1, padx=(10, 0), pady=8, sticky="ew")
        
        ttk.Label(form_frame, text="Funcion√°rio:").grid(row=2, column=0, sticky="w", pady=8)
        func_entry = ttk.Entry(form_frame, textvariable=self.funcionario_var, width=20)
        func_entry.grid(row=2, column=1, padx=(10, 0), pady=8, sticky="ew")
        
        form_frame.columnconfigure(1, weight=1)
        
        # Bot√µes
        btn_frame = ttk.Frame(main_frame)
        btn_frame.pack(fill=tk.X)
        
        btn_text = "üí∞ Confirmar" if self.tipo == "SANGRIA" else "‚ûï Confirmar"
        ttk.Button(btn_frame, text=btn_text, command=self.confirmar, width=15).pack(side=tk.LEFT, padx=(0, 10))
        ttk.Button(btn_frame, text="‚ùå Cancelar", command=self.dialog.destroy, width=15).pack(side=tk.RIGHT)
        
        self.dialog.bind('<Return>', lambda e: self.confirmar())
    
    def confirmar(self):
        """Confirmar movimenta√ß√£o"""
        try:
            valor = float(self.valor_var.get().replace(',', '.'))
            descricao = self.descricao_var.get().strip()
            funcionario = self.funcionario_var.get().strip() or "Operador"
            
            if valor <= 0:
                messagebox.showerror("Erro", "Valor deve ser maior que zero")
                return
            
            with sqlite3.connect(self.db.db_path) as conn:
                cursor = conn.cursor()
                
                # Registrar movimenta√ß√£o
                cursor.execute("""
                    INSERT INTO movimentacoes_caixa (caixa_id, tipo, valor, descricao, funcionario)
                    VALUES (?, ?, ?, ?, ?)
                """, (self.caixa_id, self.tipo, valor, descricao, funcionario))
                
                # Atualizar total no caixa
                if self.tipo == "SANGRIA":
                    cursor.execute("""
                        UPDATE caixa SET valor_sangria = valor_sangria + ?
                        WHERE id = ?
                    """, (valor, self.caixa_id))
                else:  # REFORCO
                    cursor.execute("""
                        UPDATE caixa SET valor_reforco = valor_reforco + ?
                        WHERE id = ?
                    """, (valor, self.caixa_id))
                
                conn.commit()
            
            acao = "Sangria realizada" if self.tipo == "SANGRIA" else "Refor√ßo realizado"
            messagebox.showinfo("Sucesso", f"{acao} com sucesso!\nValor: R$ {valor:.2f}")
            self.resultado = True
            self.dialog.destroy()
            
        except ValueError:
            messagebox.showerror("Erro", "Valor deve ser um n√∫mero v√°lido")
        except Exception as e:
            messagebox.showerror("Erro", f"Erro ao registrar movimenta√ß√£o: {e}")

class FecharCaixaDialog:
    """Dialog para fechar caixa"""
    
    def __init__(self, parent, db, caixa_atual):
        self.parent = parent
        self.db = db
        self.caixa_atual = caixa_atual
        self.resultado = False
        
        self.dialog = tk.Toplevel(parent)
        self.dialog.title("üîí Fechar Caixa")
        self.dialog.geometry("500x400")
        self.dialog.transient(parent)
        self.dialog.grab_set()
        centralizar_janela(self.dialog)
        
        self.valor_final_var = tk.StringVar()
        self.observacoes_var = tk.StringVar()
        
        self.setup_ui()
        self.calcular_valores()
    
    def setup_ui(self):
        """Configurar interface"""
        main_frame = ttk.Frame(self.dialog, padding="20")
        main_frame.pack(fill=tk.BOTH, expand=True)
        
        ttk.Label(main_frame, text="üîí Fechamento de Caixa", font=("Arial", 14, "bold")).pack(pady=(0, 20))
        
        # Frame resumo
        resumo_frame = ttk.LabelFrame(main_frame, text="Resumo do Dia", padding="15")
        resumo_frame.pack(fill=tk.X, pady=(0, 20))
        
        self.resumo_text = tk.Text(resumo_frame, height=8, width=50, wrap=tk.WORD, font=("Courier", 10))
        self.resumo_text.pack(fill=tk.X)
        self.resumo_text.config(state=tk.DISABLED)
        
        # Frame fechamento
        fecha_frame = ttk.LabelFrame(main_frame, text="Dados do Fechamento", padding="15")
        fecha_frame.pack(fill=tk.X, pady=(0, 20))
        
        ttk.Label(fecha_frame, text="Valor Real em Caixa (R$):").grid(row=0, column=0, sticky="w", pady=8)
        valor_entry = ttk.Entry(fecha_frame, textvariable=self.valor_final_var, width=20)
        valor_entry.grid(row=0, column=1, padx=(10, 0), pady=8, sticky="ew")
        valor_entry.focus()
        
        ttk.Label(fecha_frame, text="Observa√ß√µes:").grid(row=1, column=0, sticky="w", pady=8)
        obs_entry = ttk.Entry(fecha_frame, textvariable=self.observacoes_var, width=20)
        obs_entry.grid(row=1, column=1, padx=(10, 0), pady=8, sticky="ew")
        
        fecha_frame.columnconfigure(1, weight=1)
        
        # Bot√µes
        btn_frame = ttk.Frame(main_frame)
        btn_frame.pack(fill=tk.X)
        
        ttk.Button(btn_frame, text="üîí Fechar Caixa", command=self.fechar, width=15).pack(side=tk.LEFT, padx=(0, 10))
        ttk.Button(btn_frame, text="‚ùå Cancelar", command=self.dialog.destroy, width=15).pack(side=tk.RIGHT)
    
    def calcular_valores(self):
        """Calcular valores do dia"""
        try:
            with sqlite3.connect(self.db.db_path) as conn:
                cursor = conn.cursor()
                
                # Vendas do dia
                cursor.execute("SELECT COUNT(*), SUM(total) FROM historico_vendas WHERE DATE(data_venda) = DATE('now')")
                count_vendas, total_vendas = cursor.fetchone()
                count_vendas = count_vendas or 0
                total_vendas = total_vendas or 0
                
                # Movimenta√ß√µes
                cursor.execute("""
                    SELECT tipo, SUM(valor) FROM movimentacoes_caixa 
                    WHERE caixa_id = ? AND tipo IN ('SANGRIA', 'REFORCO')
                    GROUP BY tipo
                """, (self.caixa_atual[0],))
                movimentacoes = dict(cursor.fetchall())
                
                sangria = movimentacoes.get('SANGRIA', 0)
                reforco = movimentacoes.get('REFORCO', 0)
                
                valor_inicial = self.caixa_atual[6]
                valor_teorico = valor_inicial + total_vendas - sangria + reforco
                
                resumo = f"""RESUMO DO DIA
                
Valor Inicial:      R$ {valor_inicial:>10.2f}
Vendas ({count_vendas:02d}):         R$ {total_vendas:>10.2f}
Sangrias:           R$ {sangria:>10.2f}
Refor√ßos:           R$ {reforco:>10.2f}
                    ________________
VALOR TE√ìRICO:      R$ {valor_teorico:>10.2f}

Digite o valor real em caixa para fechar."""
                
                self.resumo_text.config(state=tk.NORMAL)
                self.resumo_text.delete("1.0", tk.END)
                self.resumo_text.insert("1.0", resumo)
                self.resumo_text.config(state=tk.DISABLED)
                
                self.valor_teorico = valor_teorico
                
        except Exception as e:
            messagebox.showerror("Erro", f"Erro ao calcular valores: {e}")
    
    def fechar(self):
        """Fechar o caixa"""
        try:
            valor_final = float(self.valor_final_var.get().replace(',', '.'))
            observacoes = self.observacoes_var.get().strip()
            
            diferenca = valor_final - self.valor_teorico
            
            # Confirmar fechamento
            msg = f"Confirmar fechamento do caixa?\n\nValor te√≥rico: R$ {self.valor_teorico:.2f}\nValor real: R$ {valor_final:.2f}\nDiferen√ßa: R$ {diferenca:.2f}"
            
            if not messagebox.askyesno("Confirmar Fechamento", msg):
                return
            
            with sqlite3.connect(self.db.db_path) as conn:
                cursor = conn.cursor()
                
                # Atualizar caixa
                cursor.execute("""
                    UPDATE caixa SET 
                        data_fechamento = CURRENT_TIMESTAMP,
                        valor_final = ?,
                        status = 'FECHADO',
                        observacoes = ?
                    WHERE id = ?
                """, (valor_final, observacoes, self.caixa_atual[0]))
                
                # Registrar movimenta√ß√£o de fechamento
                cursor.execute("""
                    INSERT INTO movimentacoes_caixa (caixa_id, tipo, valor, descricao, funcionario)
                    VALUES (?, 'FECHAMENTO', ?, ?, ?)
                """, (self.caixa_atual[0], valor_final, f"Fechamento de caixa. Diferen√ßa: R$ {diferenca:.2f}", self.caixa_atual[11]))
                
                conn.commit()
            
            messagebox.showinfo("Sucesso", f"Caixa fechado com sucesso!\nDiferen√ßa: R$ {diferenca:.2f}")
            self.resultado = True
            self.dialog.destroy()
            
        except ValueError:
            messagebox.showerror("Erro", "Valor final deve ser um n√∫mero v√°lido")
        except Exception as e:
            messagebox.showerror("Erro", f"Erro ao fechar caixa: {e}")

class BackupWindow:
    """Janela de backup e sincroniza√ß√£o"""
    
    def __init__(self, parent, db):
        self.parent = parent
        self.db = db
        
        self.window = tk.Toplevel(parent)
        self.window.title("üíæ Backup e Sincroniza√ß√£o")
        self.window.geometry("800x600")
        self.window.transient(parent)
        self.window.grab_set()
        centralizar_janela(self.window)
        
        self.setup_ui()
        self.carregar_backups()
    
    def setup_ui(self):
        """Configurar interface"""
        main_frame = ttk.Frame(self.window, padding="15")
        main_frame.pack(fill=tk.BOTH, expand=True)
        
        # T√≠tulo
        title = ttk.Label(main_frame, text="üíæ Backup e Sincroniza√ß√£o", font=("Arial", 16, "bold"))
        title.pack(pady=(0, 15))
        
        # Frame a√ß√µes
        acoes_frame = ttk.LabelFrame(main_frame, text="A√ß√µes de Backup", padding="15")
        acoes_frame.pack(fill=tk.X, pady=(0, 15))
        
        # Bot√µes de backup
        btn_row1 = ttk.Frame(acoes_frame)
        btn_row1.pack(fill=tk.X, pady=(0, 10))
        
        ttk.Button(btn_row1, text="üíæ Backup Completo", command=self.backup_completo, width=20).pack(side=tk.LEFT, padx=(0, 10))
        ttk.Button(btn_row1, text="üìä Backup Dados", command=self.backup_dados, width=20).pack(side=tk.LEFT, padx=(0, 10))
        ttk.Button(btn_row1, text="üîÑ Backup Autom√°tico", command=self.configurar_auto, width=20).pack(side=tk.LEFT)
        
        btn_row2 = ttk.Frame(acoes_frame)
        btn_row2.pack(fill=tk.X)
        
        ttk.Button(btn_row2, text="üì• Restaurar Backup", command=self.restaurar_backup, width=20).pack(side=tk.LEFT, padx=(0, 10))
        ttk.Button(btn_row2, text="‚òÅÔ∏è Sincronizar Nuvem", command=self.sincronizar_nuvem, width=20).pack(side=tk.LEFT, padx=(0, 10))
        ttk.Button(btn_row2, text="üì§ Exportar Excel", command=self.exportar_excel, width=20).pack(side=tk.LEFT)
        
        # Frame configura√ß√µes
        config_frame = ttk.LabelFrame(main_frame, text="Configura√ß√µes", padding="10")
        config_frame.pack(fill=tk.X, pady=(0, 15))
        
        config_row = ttk.Frame(config_frame)
        config_row.pack(fill=tk.X)
        
        ttk.Label(config_row, text="Pasta de Backup:").pack(side=tk.LEFT)
        self.pasta_var = tk.StringVar(value="./backups")
        pasta_entry = ttk.Entry(config_row, textvariable=self.pasta_var, width=40)
        pasta_entry.pack(side=tk.LEFT, padx=(10, 10), fill=tk.X, expand=True)
        ttk.Button(config_row, text="üìÅ", command=self.escolher_pasta, width=3).pack(side=tk.LEFT)
        
        # Frame lista de backups
        list_frame = ttk.LabelFrame(main_frame, text="Hist√≥rico de Backups", padding="10")
        list_frame.pack(fill=tk.BOTH, expand=True, pady=(0, 15))
        
        # Treeview backups
        self.backup_tree = ttk.Treeview(list_frame, columns=("nome", "data", "tamanho", "tipo", "status"), show="headings", height=12)
        
        self.backup_tree.heading("nome", text="Nome do Arquivo")
        self.backup_tree.heading("data", text="Data/Hora")
        self.backup_tree.heading("tamanho", text="Tamanho")
        self.backup_tree.heading("tipo", text="Tipo")
        self.backup_tree.heading("status", text="Status")
        
        self.backup_tree.column("nome", width=250)
        self.backup_tree.column("data", width=150)
        self.backup_tree.column("tamanho", width=100)
        self.backup_tree.column("tipo", width=100)
        self.backup_tree.column("status", width=100)
        
        # Scrollbar
        scrollbar_backup = ttk.Scrollbar(list_frame, orient=tk.VERTICAL, command=self.backup_tree.yview)
        self.backup_tree.configure(yscrollcommand=scrollbar_backup.set)
        
        self.backup_tree.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)
        scrollbar_backup.pack(side=tk.RIGHT, fill=tk.Y)
        
        # Frame bot√µes inferiores
        btn_inferior = ttk.Frame(main_frame)
        btn_inferior.pack(fill=tk.X)
        
        ttk.Button(btn_inferior, text="üóëÔ∏è Excluir Backup", command=self.excluir_backup, width=18).pack(side=tk.LEFT, padx=(0, 10))
        ttk.Button(btn_inferior, text="üìã Verificar Integridade", command=self.verificar_integridade, width=20).pack(side=tk.LEFT, padx=(0, 10))
        
        # Status
        self.status_label = ttk.Label(btn_inferior, text="Pronto", foreground="green")
        self.status_label.pack(side=tk.LEFT, padx=(20, 0))
        
        ttk.Button(btn_inferior, text="‚ùå Fechar", command=self.window.destroy, width=12).pack(side=tk.RIGHT)
    
    def backup_completo(self):
        """Fazer backup completo do sistema"""
        try:
            import shutil
            import os
            from datetime import datetime
            
            self.status_label.config(text="Fazendo backup completo...", foreground="orange")
            self.window.update()
            
            # Criar pasta de backup se n√£o existir
            pasta_backup = self.pasta_var.get()
            os.makedirs(pasta_backup, exist_ok=True)
            
            # Nome do arquivo
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            nome_backup = f"backup_completo_{timestamp}.db"
            caminho_backup = os.path.join(pasta_backup, nome_backup)
            
            # Copiar banco de dados
            shutil.copy2(self.db.db_path, caminho_backup)
            
            # Calcular tamanho
            tamanho_mb = os.path.getsize(caminho_backup) / (1024 * 1024)
            
            # Registrar no banco
            with sqlite3.connect(self.db.db_path) as conn:
                cursor = conn.cursor()
                cursor.execute("""
                    INSERT INTO backups (nome_arquivo, caminho_arquivo, tamanho_mb, tipo)
                    VALUES (?, ?, ?, 'COMPLETO')
                """, (nome_backup, caminho_backup, tamanho_mb))
                conn.commit()
            
            self.status_label.config(text="Backup completo realizado com sucesso!", foreground="green")
            messagebox.showinfo("Sucesso", f"Backup completo criado:\n{nome_backup}\nTamanho: {tamanho_mb:.2f} MB")
            self.carregar_backups()
            
        except Exception as e:
            self.status_label.config(text="Erro no backup", foreground="red")
            messagebox.showerror("Erro", f"Erro ao fazer backup: {e}")
    
    def backup_dados(self):
        """Fazer backup apenas dos dados essenciais"""
        try:
            import os
            from datetime import datetime
            
            self.status_label.config(text="Fazendo backup de dados...", foreground="orange")
            self.window.update()
            
            # Criar pasta de backup se n√£o existir
            pasta_backup = self.pasta_var.get()
            os.makedirs(pasta_backup, exist_ok=True)
            
            # Nome do arquivo
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            nome_backup = f"backup_dados_{timestamp}.sql"
            caminho_backup = os.path.join(pasta_backup, nome_backup)
            
            # Exportar dados essenciais
            with sqlite3.connect(self.db.db_path) as conn:
                with open(caminho_backup, 'w', encoding='utf-8') as f:
                    for linha in conn.iterdump():
                        if any(tabela in linha for tabela in ['estoque', 'historico_vendas', 'contas_abertas']):
                            f.write(linha + '\n')
            
            # Calcular tamanho
            tamanho_mb = os.path.getsize(caminho_backup) / (1024 * 1024)
            
            # Registrar no banco
            with sqlite3.connect(self.db.db_path) as conn:
                cursor = conn.cursor()
                cursor.execute("""
                    INSERT INTO backups (nome_arquivo, caminho_arquivo, tamanho_mb, tipo)
                    VALUES (?, ?, ?, 'DADOS')
                """, (nome_backup, caminho_backup, tamanho_mb))
                conn.commit()
            
            self.status_label.config(text="Backup de dados realizado!", foreground="green")
            messagebox.showinfo("Sucesso", f"Backup de dados criado:\n{nome_backup}\nTamanho: {tamanho_mb:.2f} MB")
            self.carregar_backups()
            
        except Exception as e:
            self.status_label.config(text="Erro no backup", foreground="red")
            messagebox.showerror("Erro", f"Erro ao fazer backup de dados: {e}")
    
    def configurar_auto(self):
        """Configurar backup autom√°tico"""
        messagebox.showinfo("Em Desenvolvimento", "Funcionalidade de backup autom√°tico em desenvolvimento.\n\nNo momento, execute backups manuais regularmente.")
    
    def sincronizar_nuvem(self):
        """Sincronizar com a nuvem"""
        messagebox.showinfo("Em Desenvolvimento", "Funcionalidade de sincroniza√ß√£o em nuvem em desenvolvimento.\n\nUse backup manual e copie os arquivos para sua nuvem preferida (Google Drive, Dropbox, etc.)")
    
    def exportar_excel(self):
        """Exportar dados para Excel"""
        try:
            import pandas as pd
            import os
            from datetime import datetime
            
            self.status_label.config(text="Exportando para Excel...", foreground="orange")
            self.window.update()
            
            pasta_backup = self.pasta_var.get()
            os.makedirs(pasta_backup, exist_ok=True)
            
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            nome_excel = f"export_dados_{timestamp}.xlsx"
            caminho_excel = os.path.join(pasta_backup, nome_excel)
            
            with sqlite3.connect(self.db.db_path) as conn:
                # Ler dados das tabelas
                estoque_df = pd.read_sql_query("SELECT * FROM estoque", conn)
                vendas_df = pd.read_sql_query("SELECT * FROM historico_vendas", conn)
                contas_df = pd.read_sql_query("SELECT * FROM contas_abertas", conn)
                
                # Criar arquivo Excel com m√∫ltiplas abas
                with pd.ExcelWriter(caminho_excel, engine='openpyxl') as writer:
                    estoque_df.to_excel(writer, sheet_name='Estoque', index=False)
                    vendas_df.to_excel(writer, sheet_name='Vendas', index=False)
                    contas_df.to_excel(writer, sheet_name='Contas_Abertas', index=False)
            
            tamanho_mb = os.path.getsize(caminho_excel) / (1024 * 1024)
            
            # Registrar no banco
            with sqlite3.connect(self.db.db_path) as conn:
                cursor = conn.cursor()
                cursor.execute("""
                    INSERT INTO backups (nome_arquivo, caminho_arquivo, tamanho_mb, tipo)
                    VALUES (?, ?, ?, 'EXCEL')
                """, (nome_excel, caminho_excel, tamanho_mb))
                conn.commit()
            
            self.status_label.config(text="Exporta√ß√£o conclu√≠da!", foreground="green")
            messagebox.showinfo("Sucesso", f"Dados exportados para Excel:\n{nome_excel}\nTamanho: {tamanho_mb:.2f} MB")
            self.carregar_backups()
            
        except Exception as e:
            self.status_label.config(text="Erro na exporta√ß√£o", foreground="red")
            messagebox.showerror("Erro", f"Erro ao exportar para Excel: {e}")
    
    def restaurar_backup(self):
        """Restaurar backup selecionado"""
        selection = self.backup_tree.selection()
        if not selection:
            messagebox.showerror("Erro", "Selecione um backup para restaurar")
            return
        
        if not messagebox.askyesno("Confirmar", "ATEN√á√ÉO: Restaurar backup substituir√° todos os dados atuais.\n\nDeseja continuar?"):
            return
        
        # Implementar restaura√ß√£o
        messagebox.showinfo("Em Desenvolvimento", "Funcionalidade de restaura√ß√£o em desenvolvimento.\n\nPara restaurar, substitua manualmente o arquivo banco.db")
    
    def escolher_pasta(self):
        """Escolher pasta de backup"""
        from tkinter import filedialog
        pasta = filedialog.askdirectory(title="Escolher Pasta de Backup")
        if pasta:
            self.pasta_var.set(pasta)
    
    def carregar_backups(self):
        """Carregar lista de backups"""
        # Limpar lista
        for item in self.backup_tree.get_children():
            self.backup_tree.delete(item)
        
        try:
            with sqlite3.connect(self.db.db_path) as conn:
                cursor = conn.cursor()
                cursor.execute("""
                    SELECT nome_arquivo, data_backup, tamanho_mb, tipo, status
                    FROM backups 
                    ORDER BY data_backup DESC
                """)
                backups = cursor.fetchall()
                
                for backup in backups:
                    nome, data, tamanho, tipo, status = backup
                    
                    try:
                        data_fmt = datetime.fromisoformat(data).strftime("%d/%m/%Y %H:%M")
                    except:
                        data_fmt = data
                    
                    self.backup_tree.insert("", "end", values=(
                        nome,
                        data_fmt,
                        f"{tamanho:.2f} MB" if tamanho else "N/A",
                        tipo,
                        status
                    ))
                    
        except Exception as e:
            print(f"Erro ao carregar backups: {e}")
    
    def excluir_backup(self):
        """Excluir backup selecionado"""
        selection = self.backup_tree.selection()
        if not selection:
            messagebox.showerror("Erro", "Selecione um backup para excluir")
            return
        
        item = self.backup_tree.item(selection[0])
        nome_arquivo = item['values'][0]
        
        if messagebox.askyesno("Confirmar", f"Excluir backup '{nome_arquivo}'?"):
            try:
                with sqlite3.connect(self.db.db_path) as conn:
                    cursor = conn.cursor()
                    cursor.execute("DELETE FROM backups WHERE nome_arquivo = ?", (nome_arquivo,))
                    conn.commit()
                
                messagebox.showinfo("Sucesso", "Backup exclu√≠do do registro")
                self.carregar_backups()
                
            except Exception as e:
                messagebox.showerror("Erro", f"Erro ao excluir backup: {e}")
    
    def verificar_integridade(self):
        """Verificar integridade dos backups"""
        try:
            import os
            
            pasta_backup = self.pasta_var.get()
            if not os.path.exists(pasta_backup):
                messagebox.showerror("Erro", "Pasta de backup n√£o encontrada")
                return
            
            arquivos_pasta = os.listdir(pasta_backup)
            
            with sqlite3.connect(self.db.db_path) as conn:
                cursor = conn.cursor()
                cursor.execute("SELECT nome_arquivo, caminho_arquivo FROM backups")
                backups_db = cursor.fetchall()
            
            # Verificar arquivos
            arquivos_ok = 0
            arquivos_faltando = 0
            
            for nome, caminho in backups_db:
                if os.path.exists(caminho):
                    arquivos_ok += 1
                else:
                    arquivos_faltando += 1
            
            resultado = f"Verifica√ß√£o de Integridade:\n\n"
            resultado += f"‚úÖ Arquivos OK: {arquivos_ok}\n"
            resultado += f"‚ùå Arquivos faltando: {arquivos_faltando}\n"
            resultado += f"üìÅ Arquivos na pasta: {len(arquivos_pasta)}"
            
            messagebox.showinfo("Verifica√ß√£o de Integridade", resultado)
            
        except Exception as e:
            messagebox.showerror("Erro", f"Erro ao verificar integridade: {e}")




def main():
    """Fun√ß√£o principal"""
    print("üöÄ Iniciando Sistema de Lanchonete...")
    
    # Verificar sistema de prote√ß√£o primeiro
    if PROTECAO_ATIVA:
        print("üîê Verificando sistema de prote√ß√£o...")
        try:
            protecao = SistemaProtecaoAutoria()
            if not protecao.inicializar_protecao():
                print("‚ùå Falha na verifica√ß√£o de prote√ß√£o")
                return
            print("‚úì Sistema de prote√ß√£o OK")
        except Exception as e:
            print(f"‚ö†Ô∏è Erro no sistema de prote√ß√£o: {e}")
            # Continuar mesmo com erro de prote√ß√£o para n√£o travar o sistema
    
    if not verificar_dependencias():
        print("‚ùå Erro: Depend√™ncias n√£o dispon√≠veis")
        return
    
    try:
        app = MainWindow()
        print("‚úì Banco de dados configurado")
        print("‚úì Sistema carregado com sucesso")
        app.run()
    except Exception as e:
        print(f"‚ùå Erro ao executar: {e}")

if __name__ == "__main__":
    main()