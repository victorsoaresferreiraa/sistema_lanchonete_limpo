"""
üìä DASHBOARD FINANCEIRO COMPLETO - Sistema da Lanchonete

Este m√≥dulo implementa um painel executivo completo que mostra:
- M√©tricas financeiras em tempo real
- Gr√°ficos de an√°lise de vendas  
- Performance de produtos
- Tend√™ncias de hor√°rios
- Alertas de gest√£o

COMO FUNCIONA:
1. DatabaseManager: busca dados do banco SQLite
2. Matplotlib: cria gr√°ficos interativos
3. Tkinter: exibe tudo em interface amig√°vel
4. Atualiza√ß√£o autom√°tica: dados sempre atualizados

PARA O USU√ÅRIO DA LANCHONETE:
- V√™ quanto vendeu hoje em tempo real
- Identifica produtos que mais vendem
- Descobre melhores hor√°rios de movimento
- Recebe alertas de estoque baixo
- Acompanha crescimento do neg√≥cio
"""

import tkinter as tk
from tkinter import ttk, messagebox
import matplotlib.pyplot as plt
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg
from matplotlib.figure import Figure
import matplotlib.dates as mdates
from datetime import datetime, timedelta
import sqlite3
from src.estoque.database import DatabaseManager
from src.utils.helpers import centralizar_janela


class DashboardWindow:
    """
    üéØ CLASSE PRINCIPAL DO DASHBOARD
    
    Esta classe cria uma janela completa de an√°lise financeira que ajuda
    o dono da lanchonete a entender seu neg√≥cio em tempo real.
    
    O QUE FAZ:
    - Conecta com o banco de dados para buscar informa√ß√µes
    - Calcula m√©tricas importantes automaticamente  
    - Cria gr√°ficos visuais f√°ceis de entender
    - Atualiza dados em tempo real
    - Mostra alertas importantes
    
    PARA QUE SERVE:
    - Saber quanto est√° vendendo no dia
    - Ver quais produtos vendem mais
    - Descobrir hor√°rios de pico
    - Controlar estoque baixo
    - Acompanhar crescimento do neg√≥cio
    """
    
    def __init__(self, parent):
        """
        INICIALIZA√á√ÉO DO DASHBOARD
        
        O que acontece aqui:
        1. Conecta com o banco de dados (self.db)
        2. Cria a janela principal (self.window)  
        3. Configura o tamanho e posi√ß√£o
        4. Chama setup_ui() para criar a interface
        5. Chama atualizar_dashboard() para carregar dados
        """
        self.parent = parent
        self.db = DatabaseManager()  # Conex√£o com banco de dados
        
        # Criar janela principal
        self.window = tk.Toplevel(parent)
        self.window.title("üìä Dashboard Executivo - An√°lise Financeira")
        self.window.geometry("1300x850")  # Tamanho otimizado para visualiza√ß√£o
        self.window.resizable(True, True)
        
        # Tornar janela modal (foco exclusivo)
        self.window.transient(parent)
        self.window.grab_set()
        
        # Configurar cores e estilo
        self.cores = {
            'receita': '#2E8B57',      # Verde para receita
            'vendas': '#4169E1',       # Azul para vendas
            'produtos': '#FF8C00',     # Laranja para produtos
            'estoque': '#DC143C',      # Vermelho para alertas
            'crescimento': '#9370DB'   # Roxo para crescimento
        }
        
        # Configurar interface
        self.setup_ui()
        centralizar_janela(self.window)
        
        # Carregar dados iniciais
        self.atualizar_dashboard()
        
    def setup_ui(self):
        """
        üé® CONFIGURA√á√ÉO DA INTERFACE VISUAL
        
        Esta fun√ß√£o cria toda a estrutura visual do dashboard.
        √â como montar a "mesa" onde vamos colocar as informa√ß√µes.
        
        ESTRUTURA CRIADA:
        1. Frame principal (container geral)
        2. T√≠tulo chamativo  
        3. √Årea de m√©tricas (n√∫meros importantes)
        4. √Årea de gr√°ficos (an√°lises visuais)
        5. Bot√µes de controle (atualizar, exportar, fechar)
        
        EXPLICA√á√ÉO T√âCNICA:
        - ttk.Frame = caixas para organizar elementos
        - pack() = posiciona elementos na tela
        - LabelFrame = caixa com t√≠tulo
        - Notebook = abas para m√∫ltiplos gr√°ficos
        """
        
        # === 1. CONTAINER PRINCIPAL ===
        main_frame = ttk.Frame(self.window)
        main_frame.pack(fill=tk.BOTH, expand=True, padx=15, pady=15)
        
        # === 2. T√çTULO DO DASHBOARD ===
        header_frame = ttk.Frame(main_frame)
        header_frame.pack(fill=tk.X, pady=(0, 20))
        
        title_label = ttk.Label(
            header_frame,
            text="üìä Dashboard Executivo - Lanchonete",
            font=("Arial", 18, "bold")
        )
        title_label.pack(side=tk.LEFT)
        
        # Data/hora da √∫ltima atualiza√ß√£o
        self.update_time_label = ttk.Label(
            header_frame,
            text="",
            font=("Arial", 10),
            foreground="gray"
        )
        self.update_time_label.pack(side=tk.RIGHT)
        
        # === 3. √ÅREA DE M√âTRICAS PRINCIPAIS ===
        metrics_frame = ttk.LabelFrame(
            main_frame, 
            text="üí∞ M√©tricas Financeiras - Vis√£o R√°pida", 
            padding="12"
        )
        metrics_frame.pack(fill=tk.X, pady=(0, 12))
        
        # Configurar grid de m√©tricas
        self.setup_metrics_grid(metrics_frame)
        
        # === 4. √ÅREA DE ALERTAS ===
        self.alerts_frame = ttk.LabelFrame(
            main_frame,
            text="üö® Alertas de Gest√£o",
            padding="8"
        )
        self.alerts_frame.pack(fill=tk.X, pady=(0, 12))
        
        self.alerts_text = tk.Text(
            self.alerts_frame,
            height=2,
            wrap=tk.WORD,
            font=("Arial", 10)
        )
        self.alerts_text.pack(fill=tk.X)
        
        # === 5. √ÅREA DE GR√ÅFICOS ===
        charts_frame = ttk.LabelFrame(
            main_frame, 
            text="üìà An√°lise Visual de Desempenho", 
            padding="10"
        )
        charts_frame.pack(fill=tk.BOTH, expand=True, pady=(0, 15))
        
        # Notebook para m√∫ltiplos gr√°ficos
        self.notebook = ttk.Notebook(charts_frame)
        self.notebook.pack(fill=tk.BOTH, expand=True)
        
        # Configurar abas dos gr√°ficos
        self.setup_chart_tabs()
        
        # === 6. BOT√ïES DE CONTROLE ===
        controls_frame = ttk.Frame(main_frame)
        controls_frame.pack(fill=tk.X, pady=(10, 0))
        
        # Bot√£o atualizar
        btn_atualizar = ttk.Button(
            controls_frame,
            text="üîÑ Atualizar Dados",
            command=self.atualizar_dashboard
        )
        btn_atualizar.pack(side=tk.LEFT, padx=(0, 10))
        
        # Bot√£o exportar
        btn_exportar = ttk.Button(
            controls_frame,
            text="üìÑ Exportar Relat√≥rio",
            command=self.exportar_relatorio
        )
        btn_exportar.pack(side=tk.LEFT, padx=(0, 10))
        
        # Bot√£o ajuda
        btn_ajuda = ttk.Button(
            controls_frame,
            text="‚ùì Como Usar",
            command=self.mostrar_ajuda
        )
        btn_ajuda.pack(side=tk.LEFT, padx=(0, 10))
        
        # Bot√£o fechar
        btn_fechar = ttk.Button(
            controls_frame,
            text="‚ùå Fechar",
            command=self.window.destroy
        )
        btn_fechar.pack(side=tk.RIGHT)
        
    def setup_metrics_grid(self, parent):
        """
        üíº CONFIGURA√á√ÉO DAS M√âTRICAS PRINCIPAIS
        
        Esta fun√ß√£o cria os "cart√µes" de informa√ß√µes importantes que
        o dono da lanchonete precisa ver rapidamente.
        
        M√âTRICAS CRIADAS:
        Linha 1: Desempenho do dia
        - Receita Hoje: quanto vendeu hoje
        - Vendas Hoje: quantas vendas fez
        - Produto Top: produto que mais vende
        - Ticket M√©dio: valor m√©dio por venda
        
        Linha 2: Controle operacional  
        - Valor Estoque: quanto vale o estoque
        - Estoque Baixo: quantos produtos acabando
        - Receita M√™s: total do m√™s atual
        - Crescimento: compara√ß√£o com per√≠odo anterior
        
        COMO FUNCIONA:
        1. Cria frames (caixinhas) para cada m√©trica
        2. Adiciona t√≠tulo e valor para cada uma
        3. Usa cores diferentes para f√°cil identifica√ß√£o
        4. Organiza em grid (2 linhas x 4 colunas)
        """
        
        # Dicion√°rio para armazenar os labels das m√©tricas
        self.metrics_labels = {}
        
        # === LINHA 1: M√âTRICAS DO DIA ===
        metrics_row1 = [
            ("receita_hoje", "üí∞ Receita Hoje", self.cores['receita'], "Quanto vendeu hoje"),
            ("vendas_hoje", "üõí Vendas Hoje", self.cores['vendas'], "N√∫mero de vendas"),
            ("produto_top", "üèÜ Produto Top", self.cores['produtos'], "Produto mais vendido"),
            ("ticket_medio", "üéØ Ticket M√©dio", self.cores['crescimento'], "Valor m√©dio por venda")
        ]
        
        for i, (key, label, color, tooltip) in enumerate(metrics_row1):
            # Criar frame para cada m√©trica
            metric_frame = ttk.Frame(parent, relief="raised", borderwidth=1)
            metric_frame.grid(row=0, column=i, padx=8, pady=5, sticky=tk.EW, ipadx=10, ipady=5)
            
            # T√≠tulo da m√©trica
            title_label = ttk.Label(
                metric_frame, 
                text=label, 
                font=("Arial", 10, "bold")
            )
            title_label.pack()
            
            # Valor da m√©trica (ser√° atualizado dinamicamente)
            self.metrics_labels[key] = ttk.Label(
                metric_frame, 
                text="Carregando...", 
                font=("Arial", 16, "bold"), 
                foreground=color
            )
            self.metrics_labels[key].pack()
            
            # Tooltip explicativo
            tooltip_label = ttk.Label(
                metric_frame,
                text=tooltip,
                font=("Arial", 8),
                foreground="gray"
            )
            tooltip_label.pack()
        
        # === LINHA 2: M√âTRICAS DE CONTROLE ===
        metrics_row2 = [
            ("estoque_total", "üì¶ Valor Estoque", self.cores['estoque'], "Valor total em estoque"),
            ("produtos_baixo", "‚ö†Ô∏è Estoque Baixo", "#FF4500", "Produtos acabando"),
            ("receita_mes", "üìÖ Receita M√™s", self.cores['receita'], "Total do m√™s atual"),
            ("crescimento", "üìà Crescimento", self.cores['crescimento'], "Compara√ß√£o per√≠odo anterior")
        ]
        
        for i, (key, label, color, tooltip) in enumerate(metrics_row2):
            # Criar frame para cada m√©trica
            metric_frame = ttk.Frame(parent, relief="raised", borderwidth=1)
            metric_frame.grid(row=1, column=i, padx=8, pady=5, sticky=tk.EW, ipadx=10, ipady=5)
            
            # T√≠tulo da m√©trica
            title_label = ttk.Label(
                metric_frame, 
                text=label, 
                font=("Arial", 10, "bold")
            )
            title_label.pack()
            
            # Valor da m√©trica
            self.metrics_labels[key] = ttk.Label(
                metric_frame, 
                text="Carregando...", 
                font=("Arial", 16, "bold"), 
                foreground=color
            )
            self.metrics_labels[key].pack()
            
            # Tooltip explicativo
            tooltip_label = ttk.Label(
                metric_frame,
                text=tooltip,
                font=("Arial", 8),
                foreground="gray"
            )
            tooltip_label.pack()
        
        # Configurar colunas para expandir uniformemente
        for i in range(4):
            parent.grid_columnconfigure(i, weight=1)
            
    def setup_chart_tabs(self):
        """
        üìà CONFIGURA√á√ÉO DAS ABAS DE GR√ÅFICOS
        
        Esta fun√ß√£o cria as abas onde ficar√£o os gr√°ficos visuais.
        Cada aba mostra uma an√°lise diferente dos dados.
        
        ABAS CRIADAS:
        1. Vendas Di√°rias: gr√°fico de receita por dia
        2. Performance Produtos: quais produtos vendem mais
        3. An√°lise Hor√°rios: melhores hor√°rios do dia
        4. Compara√ß√£o Mensal: evolu√ß√£o m√™s a m√™s
        
        EXPLICA√á√ÉO T√âCNICA:
        - ttk.Notebook = container de abas
        - ttk.Frame = cada aba √© um frame
        - notebook.add() = adiciona aba ao container
        """
        
        # Aba 1: An√°lise de Vendas Di√°rias
        self.tab_vendas = ttk.Frame(self.notebook)
        self.notebook.add(self.tab_vendas, text="üìä Vendas Di√°rias")
        
        # Aba 2: Performance dos Produtos
        self.tab_produtos = ttk.Frame(self.notebook)
        self.notebook.add(self.tab_produtos, text="üèÜ Top Produtos")
        
        # Aba 3: An√°lise por Hor√°rio
        self.tab_horarios = ttk.Frame(self.notebook)
        self.notebook.add(self.tab_horarios, text="üïê Hor√°rios de Pico")
        
        # Aba 4: Compara√ß√£o Mensal
        self.tab_comparacao = ttk.Frame(self.notebook)
        self.notebook.add(self.tab_comparacao, text="üìÖ Evolu√ß√£o Mensal")
        
    def atualizar_dashboard(self):
        """
        üîÑ ATUALIZA√á√ÉO COMPLETA DO DASHBOARD
        
        Esta √© a fun√ß√£o principal que busca todos os dados novos
        e atualiza a interface visual com as informa√ß√µes atuais.
        
        SEQU√äNCIA DE ATUALIZA√á√ÉO:
        1. Atualizar m√©tricas num√©ricas
        2. Atualizar alertas de gest√£o
        3. Atualizar todos os gr√°ficos
        4. Marcar hor√°rio da atualiza√ß√£o
        
        √â chamada automaticamente quando:
        - Dashboard √© aberto
        - Usu√°rio clica em "Atualizar"
        - Periodicamente (se configurado)
        """
        try:
            print("üîÑ Iniciando atualiza√ß√£o do dashboard...")
            
            # 1. Atualizar m√©tricas principais
            self.atualizar_metricas()
            
            # 2. Atualizar alertas
            self.atualizar_alertas()
            
            # 3. Atualizar gr√°ficos
            self.atualizar_graficos()
            
            # 4. Marcar hor√°rio da atualiza√ß√£o
            agora = datetime.now().strftime("%d/%m/%Y %H:%M:%S")
            self.update_time_label.config(text=f"√öltima atualiza√ß√£o: {agora}")
            
            print("‚úÖ Dashboard atualizado com sucesso!")
            
        except Exception as e:
            print(f"‚ùå Erro na atualiza√ß√£o: {e}")
            messagebox.showerror("Erro", f"Erro ao atualizar dashboard: {str(e)}")
        
    def atualizar_metricas(self):
        """
        üí∞ ATUALIZA√á√ÉO DAS M√âTRICAS FINANCEIRAS
        
        Esta fun√ß√£o busca no banco de dados todos os n√∫meros importantes
        e atualiza os cart√µes de m√©tricas na interface.
        
        M√âTRICAS CALCULADAS:
        1. Receita do dia atual
        2. N√∫mero de vendas realizadas
        3. Produto mais vendido
        4. Ticket m√©dio (receita √∑ n√∫mero de vendas)
        5. Valor total do estoque
        6. Produtos com estoque baixo
        7. Receita do m√™s
        8. Crescimento comparado
        
        COMO FUNCIONA:
        - Busca dados do banco com self.db.m√©todo()
        - Calcula valores quando necess√°rio
        - Atualiza os labels visuais com .config(text=...)
        - Trata erros para n√£o quebrar o sistema
        """
        try:
            print("üìä Atualizando m√©tricas...")
            
            # Data de hoje no formato brasileiro
            hoje = datetime.now().strftime("%d/%m/%Y")
            
            # === RECEITA HOJE ===
            receita_hoje = self.db.obter_receita_periodo(hoje, hoje)
            self.metrics_labels["receita_hoje"].config(
                text=f"R$ {receita_hoje:.2f}".replace('.', ',')
            )
            
            # === VENDAS HOJE ===
            vendas_hoje = self.db.contar_vendas_periodo(hoje, hoje)
            self.metrics_labels["vendas_hoje"].config(text=str(vendas_hoje))
            
            # === PRODUTO TOP ===
            produto_top = self.db.obter_produto_mais_vendido()
            # Limitar tamanho do nome para caber no cart√£o
            if len(produto_top) > 15:
                produto_top = produto_top[:12] + "..."
            self.metrics_labels["produto_top"].config(text=produto_top or "Nenhum")
            
            # === TICKET M√âDIO ===
            # Calcular: receita total √∑ n√∫mero de vendas
            if vendas_hoje > 0:
                ticket_medio = receita_hoje / vendas_hoje
                self.metrics_labels["ticket_medio"].config(
                    text=f"R$ {ticket_medio:.2f}".replace('.', ',')
                )
            else:
                self.metrics_labels["ticket_medio"].config(text="R$ 0,00")
            
            # === VALOR TOTAL DO ESTOQUE ===
            estoque_total = self.db.obter_valor_total_estoque()
            self.metrics_labels["estoque_total"].config(
                text=f"R$ {estoque_total:.2f}".replace('.', ',')
            )
            
            # === PRODUTOS COM ESTOQUE BAIXO ===
            # Considerar baixo: menos de 5 unidades
            produtos_baixo = self.db.contar_produtos_estoque_baixo(5)
            self.metrics_labels["produtos_baixo"].config(text=str(produtos_baixo))
            
            # === RECEITA DO M√äS ===
            # Do dia 1 at√© hoje
            inicio_mes = datetime.now().replace(day=1).strftime("%d/%m/%Y")
            receita_mes = self.db.obter_receita_periodo(inicio_mes, hoje)
            self.metrics_labels["receita_mes"].config(
                text=f"R$ {receita_mes:.2f}".replace('.', ',')
            )
            
            # === CRESCIMENTO ===
            # Comparar hoje com mesmo dia da semana passada
            semana_passada = (datetime.now() - timedelta(days=7)).strftime("%d/%m/%Y")
            receita_semana_passada = self.db.obter_receita_periodo(semana_passada, semana_passada)
            
            if receita_semana_passada > 0:
                crescimento = ((receita_hoje - receita_semana_passada) / receita_semana_passada) * 100
                sinal = "+" if crescimento >= 0 else ""
                self.metrics_labels["crescimento"].config(text=f"{sinal}{crescimento:.1f}%")
            else:
                self.metrics_labels["crescimento"].config(text="N/A")
            
            print("‚úÖ M√©tricas atualizadas")
            
        except Exception as e:
            print(f"‚ùå Erro ao atualizar m√©tricas: {e}")
            # Em caso de erro, mostrar valores padr√£o
            for key in self.metrics_labels:
                self.metrics_labels[key].config(text="Erro")
    
    def atualizar_alertas(self):
        """
        üö® ATUALIZA√á√ÉO DOS ALERTAS DE GEST√ÉO
        
        Esta fun√ß√£o analisa a situa√ß√£o atual e gera alertas importantes
        para o dono da lanchonete tomar decis√µes r√°pidas.
        
        TIPOS DE ALERTAS:
        1. Estoque baixo - produtos acabando
        2. Sem vendas - dia sem movimento
        3. Produto em alta - vendendo muito
        4. Meta alcan√ßada - bom desempenho
        
        COMO FUNCIONA:
        - Analisa dados atuais
        - Identifica situa√ß√µes importantes
        - Cria mensagens de alerta
        - Exibe na √°rea de alertas
        """
        try:
            alertas = []
            hoje = datetime.now().strftime("%d/%m/%Y")
            
            # Verificar estoque baixo
            produtos_baixo = self.db.contar_produtos_estoque_baixo(5)
            if produtos_baixo > 0:
                alertas.append(f"‚ö†Ô∏è {produtos_baixo} produto(s) com estoque baixo (menos de 5 unidades)")
            
            # Verificar se h√° vendas hoje
            vendas_hoje = self.db.contar_vendas_periodo(hoje, hoje)
            if vendas_hoje == 0:
                alertas.append("üì¢ Nenhuma venda registrada hoje. Verifique se o sistema est√° sendo usado.")
            elif vendas_hoje >= 10:
                alertas.append(f"üéâ √ìtimo! J√° foram {vendas_hoje} vendas hoje!")
            
            # Verificar receita do dia
            receita_hoje = self.db.obter_receita_periodo(hoje, hoje)
            if receita_hoje >= 500:
                alertas.append(f"üí∞ Excelente! Receita de hoje j√° passou de R$ {receita_hoje:.2f}!")
            
            # Verificar produto em alta
            produto_top = self.db.obter_produto_mais_vendido()
            if produto_top and produto_top != "Nenhum":
                alertas.append(f"üî• {produto_top} est√° em alta hoje!")
            
            # Se n√£o h√° alertas, mostrar mensagem positiva
            if not alertas:
                alertas.append("‚úÖ Tudo funcionando bem! Nenhum alerta no momento.")
            
            # Exibir alertas na interface
            self.alerts_text.delete(1.0, tk.END)
            self.alerts_text.insert(tk.END, "\n".join(alertas))
            
        except Exception as e:
            print(f"‚ùå Erro ao atualizar alertas: {e}")
            self.alerts_text.delete(1.0, tk.END)
            self.alerts_text.insert(tk.END, "‚ùå Erro ao carregar alertas")
            
    def atualizar_graficos(self):
        """
        üìà ATUALIZA√á√ÉO DE TODOS OS GR√ÅFICOS
        
        Esta fun√ß√£o atualiza todas as an√°lises visuais do dashboard.
        Cada gr√°fico mostra uma perspectiva diferente dos dados.
        
        GR√ÅFICOS ATUALIZADOS:
        1. Vendas di√°rias - tend√™ncia de receita
        2. Performance produtos - ranking de vendas
        3. An√°lise hor√°rios - picos de movimento
        4. Compara√ß√£o mensal - evolu√ß√£o do neg√≥cio
        """
        try:
            print("üìà Atualizando gr√°ficos...")
            
            # Configurar matplotlib para melhor apar√™ncia
            plt.style.use('default')
            plt.rcParams['font.size'] = 10
            plt.rcParams['figure.facecolor'] = 'white'
            
            # Atualizar cada gr√°fico
            self.criar_grafico_vendas_diarias()
            self.criar_grafico_produtos_performance()
            self.criar_grafico_analise_horarios()
            self.criar_grafico_comparacao_mensal()
            
            print("‚úÖ Gr√°ficos atualizados")
            
        except Exception as e:
            print(f"‚ùå Erro ao atualizar gr√°ficos: {e}")
        
    def criar_grafico_vendas_diarias(self):
        """
        üìä GR√ÅFICO DE VENDAS DI√ÅRIAS
        
        Este gr√°fico mostra a evolu√ß√£o das vendas dos √∫ltimos 7 dias.
        Ajuda o dono da lanchonete a entender:
        - Se as vendas est√£o crescendo ou caindo
        - Quais dias da semana vendem mais
        - Tend√™ncias de receita e quantidade
        
        DADOS MOSTRADOS:
        - Linha superior: receita em R$ por dia
        - Linha inferior: quantidade de itens vendidos por dia
        
        COMO FUNCIONA:
        1. Busca dados dos √∫ltimos 7 dias no banco
        2. Cria dois gr√°ficos: receita (linha) e quantidade (barras)
        3. Usa matplotlib para criar gr√°ficos bonitos
        4. Integra com tkinter usando FigureCanvasTkAgg
        """
        try:
            print("üìä Criando gr√°fico de vendas di√°rias...")
            
            # Limpar aba antes de criar novo gr√°fico
            for widget in self.tab_vendas.winfo_children():
                widget.destroy()
                
            # Buscar dados dos √∫ltimos 7 dias
            dados_vendas = self.db.obter_vendas_ultimos_dias(7)
            
            if not dados_vendas:
                # Se n√£o h√° dados, mostrar mensagem explicativa
                no_data_frame = ttk.Frame(self.tab_vendas)
                no_data_frame.pack(expand=True, fill=tk.BOTH)
                
                ttk.Label(
                    no_data_frame, 
                    text="üìà Nenhuma venda registrada ainda",
                    font=("Arial", 14, "bold")
                ).pack(pady=50)
                
                ttk.Label(
                    no_data_frame,
                    text="Este gr√°fico aparecer√° quando houver vendas registradas.\nComece registrando algumas vendas no sistema!",
                    font=("Arial", 11),
                    justify=tk.CENTER
                ).pack()
                return
                
            # Preparar dados para o gr√°fico
            datas = [item[0] for item in dados_vendas]  # DD/MM/YYYY
            receitas = [float(item[1]) for item in dados_vendas]  # Valores em R$
            quantidades = [int(item[2]) for item in dados_vendas]  # N√∫mero de itens
            
            # Criar figura com dois subgr√°ficos (tamanho otimizado)
            fig = Figure(figsize=(13, 7), facecolor='white')
            
            # === GR√ÅFICO 1: RECEITA DI√ÅRIA (LINHA) ===
            ax1 = fig.add_subplot(2, 1, 1)
            linha_receita = ax1.plot(
                datas, receitas, 
                marker='o', 
                linewidth=3, 
                markersize=8,
                color=self.cores['receita'],
                markerfacecolor='white',
                markeredgewidth=2
            )
            
            ax1.set_title('üí∞ Receita Di√°ria (√öltimos 7 Dias)', fontsize=14, fontweight='bold', pad=20)
            ax1.set_ylabel('Receita (R$)', fontsize=12)
            ax1.grid(True, alpha=0.3, linestyle='--')
            ax1.set_facecolor('#f8f9fa')
            
            # Adicionar valores nos pontos
            for i, (data, receita) in enumerate(zip(datas, receitas)):
                ax1.annotate(
                    f'R$ {receita:.0f}', 
                    (i, receita),
                    textcoords="offset points",
                    xytext=(0,10),
                    ha='center',
                    fontsize=9,
                    fontweight='bold'
                )
            
            # === GR√ÅFICO 2: QUANTIDADE VENDIDA (BARRAS) ===
            ax2 = fig.add_subplot(2, 1, 2)
            barras = ax2.bar(
                datas, quantidades, 
                color=self.cores['vendas'], 
                alpha=0.8,
                edgecolor='white',
                linewidth=2
            )
            
            ax2.set_title('üõí Quantidade Vendida por Dia', fontsize=14, fontweight='bold', pad=20)
            ax2.set_ylabel('Unidades Vendidas', fontsize=12)
            ax2.set_xlabel('Data', fontsize=12)
            ax2.grid(True, alpha=0.3, linestyle='--')
            ax2.set_facecolor('#f8f9fa')
            
            # Adicionar valores nas barras
            for i, (barra, quantidade) in enumerate(zip(barras, quantidades)):
                altura = barra.get_height()
                ax2.text(
                    barra.get_x() + barra.get_width()/2., 
                    altura + 0.5,
                    f'{int(quantidade)}',
                    ha='center', 
                    va='bottom',
                    fontsize=10,
                    fontweight='bold'
                )
            
            # Melhorar formata√ß√£o dos eixos
            for ax in [ax1, ax2]:
                ax.tick_params(axis='x', rotation=45)
                for spine in ax.spines.values():
                    spine.set_linewidth(0.5)
            
            # Ajustar layout
            fig.tight_layout(pad=3.0)
            
            # Adicionar ao tkinter
            canvas = FigureCanvasTkAgg(fig, self.tab_vendas)
            canvas.draw()
            canvas.get_tk_widget().pack(fill=tk.BOTH, expand=True)
            
            print("‚úÖ Gr√°fico de vendas di√°rias criado")
            
        except Exception as e:
            print(f"‚ùå Erro ao criar gr√°fico de vendas: {e}")
            # Mostrar erro na interface
            error_frame = ttk.Frame(self.tab_vendas)
            error_frame.pack(expand=True, fill=tk.BOTH)
            
            ttk.Label(
                error_frame, 
                text="‚ùå Erro ao carregar gr√°fico de vendas",
                font=("Arial", 12, "bold")
            ).pack(pady=20)
            
            ttk.Label(
                error_frame,
                text=f"Detalhes: {str(e)}",
                font=("Arial", 10)
            ).pack()
            
    def criar_grafico_produtos_performance(self):
        """
        üèÜ GR√ÅFICO DE PERFORMANCE DOS PRODUTOS
        
        Este gr√°fico mostra quais produtos est√£o vendendo mais.
        Ajuda o dono da lanchonete a:
        - Identificar produtos campe√µes de venda
        - Focar no que o cliente mais gosta
        - Decidir quais produtos promover
        - Planejar compras de estoque
        
        DADOS MOSTRADOS:
        - Lado esquerdo: receita por produto (em R$)
        - Lado direito: quantidade vendida por produto
        
        EXPLICA√á√ÉO T√âCNICA:
        1. Busca top 10 produtos por receita total
        2. Cria gr√°ficos de barras horizontais
        3. Mostra valores nas barras para f√°cil leitura
        4. Usa cores diferentes para receita vs quantidade
        """
        try:
            print("üèÜ Criando gr√°fico de performance dos produtos...")
            
            # Limpar aba
            for widget in self.tab_produtos.winfo_children():
                widget.destroy()
                
            # Buscar top 10 produtos por receita
            produtos_performance = self.db.obter_top_produtos_receita(10)
            
            if not produtos_performance:
                # Se n√£o h√° dados, mostrar mensagem
                no_data_frame = ttk.Frame(self.tab_produtos)
                no_data_frame.pack(expand=True, fill=tk.BOTH)
                
                ttk.Label(
                    no_data_frame, 
                    text="üèÜ Nenhum produto vendido ainda",
                    font=("Arial", 14, "bold")
                ).pack(pady=50)
                
                ttk.Label(
                    no_data_frame,
                    text="Registre algumas vendas para ver\nquais produtos s√£o os campe√µes!",
                    font=("Arial", 11),
                    justify=tk.CENTER
                ).pack()
                return
                
            # Preparar dados
            produtos = [item[0] for item in produtos_performance]
            receitas = [float(item[1]) for item in produtos_performance]
            quantidades = [int(item[2]) for item in produtos_performance]
            
            # Limitar nome dos produtos para caber no gr√°fico
            produtos_formatados = []
            for produto in produtos:
                if len(produto) > 20:
                    produtos_formatados.append(produto[:17] + "...")
                else:
                    produtos_formatados.append(produto)
            
            # Criar figura (produtos performance)
            fig = Figure(figsize=(13, 7), facecolor='white')
            
            # === GR√ÅFICO 1: RECEITA POR PRODUTO ===
            ax1 = fig.add_subplot(1, 2, 1)
            bars1 = ax1.barh(
                produtos_formatados, receitas, 
                color=self.cores['receita'],
                alpha=0.8,
                edgecolor='white',
                linewidth=1
            )
            
            ax1.set_title('üí∞ Top 10 Produtos por Receita', fontsize=14, fontweight='bold', pad=20)
            ax1.set_xlabel('Receita Total (R$)', fontsize=12)
            ax1.grid(True, alpha=0.3, linestyle='--', axis='x')
            ax1.set_facecolor('#f8f9fa')
            
            # Adicionar valores nas barras
            for bar, valor in zip(bars1, receitas):
                largura = bar.get_width()
                ax1.text(
                    largura + max(receitas) * 0.01,  # Pequeno offset
                    bar.get_y() + bar.get_height()/2, 
                    f'R$ {valor:.0f}', 
                    ha='left', 
                    va='center',
                    fontsize=10,
                    fontweight='bold'
                )
            
            # === GR√ÅFICO 2: QUANTIDADE POR PRODUTO ===
            ax2 = fig.add_subplot(1, 2, 2)
            bars2 = ax2.barh(
                produtos_formatados, quantidades, 
                color=self.cores['vendas'],
                alpha=0.8,
                edgecolor='white',
                linewidth=1
            )
            
            ax2.set_title('üõí Top 10 Produtos por Quantidade', fontsize=14, fontweight='bold', pad=20)
            ax2.set_xlabel('Unidades Vendidas', fontsize=12)
            ax2.grid(True, alpha=0.3, linestyle='--', axis='x')
            ax2.set_facecolor('#f8f9fa')
            
            # Adicionar valores nas barras
            for bar, valor in zip(bars2, quantidades):
                largura = bar.get_width()
                ax2.text(
                    largura + max(quantidades) * 0.01,  # Pequeno offset
                    bar.get_y() + bar.get_height()/2, 
                    f'{valor:.0f}', 
                    ha='left', 
                    va='center',
                    fontsize=10,
                    fontweight='bold'
                )
            
            # Melhorar formata√ß√£o
            for ax in [ax1, ax2]:
                ax.tick_params(axis='y', labelsize=9)
                ax.tick_params(axis='x', labelsize=10)
                for spine in ax.spines.values():
                    spine.set_linewidth(0.5)
            
            # Ajustar layout
            fig.tight_layout(pad=3.0)
            
            # Adicionar ao tkinter
            canvas = FigureCanvasTkAgg(fig, self.tab_produtos)
            canvas.draw()
            canvas.get_tk_widget().pack(fill=tk.BOTH, expand=True)
            
            print("‚úÖ Gr√°fico de performance de produtos criado")
            
        except Exception as e:
            print(f"‚ùå Erro ao criar gr√°fico de produtos: {e}")
            # Mostrar erro na interface
            error_frame = ttk.Frame(self.tab_produtos)
            error_frame.pack(expand=True, fill=tk.BOTH)
            
            ttk.Label(
                error_frame, 
                text="‚ùå Erro ao carregar gr√°fico de produtos",
                font=("Arial", 12, "bold")
            ).pack(pady=20)
            
    def criar_grafico_analise_horarios(self):
        """
        üïê GR√ÅFICO DE AN√ÅLISE POR HOR√ÅRIOS
        
        Este gr√°fico mostra em quais hor√°rios a lanchonete vende mais.
        Muito √∫til para:
        - Descobrir hor√°rios de pico de movimento
        - Planejar escalas de funcion√°rios
        - Ajustar hor√°rios de funcionamento
        - Preparar estoque nos hor√°rios certos
        
        DADOS MOSTRADOS:
        - Receita por hora do dia (0h √†s 23h)
        - √Årea preenchida para destacar volumes
        - Pontos marcados para hor√°rios de pico
        
        INTERPRETA√á√ÉO PR√ÅTICA:
        - Picos = hor√°rios para ter mais funcion√°rios
        - Vales = hor√°rios para reduzir custos
        - Tend√™ncias = padr√µes de comportamento dos clientes
        """
        try:
            print("üïê Criando gr√°fico de an√°lise por hor√°rios...")
            
            # Limpar aba
            for widget in self.tab_horarios.winfo_children():
                widget.destroy()
                
            # Buscar vendas por hor√°rio
            vendas_horario = self.db.obter_vendas_por_horario()
            
            if not vendas_horario:
                # Se n√£o h√° dados, mostrar mensagem
                no_data_frame = ttk.Frame(self.tab_horarios)
                no_data_frame.pack(expand=True, fill=tk.BOTH)
                
                ttk.Label(
                    no_data_frame, 
                    text="üïê Nenhuma venda com hor√°rio registrada",
                    font=("Arial", 14, "bold")
                ).pack(pady=50)
                
                ttk.Label(
                    no_data_frame,
                    text="Este gr√°fico mostrar√° os hor√°rios de pico\nquando houver mais vendas registradas.",
                    font=("Arial", 11),
                    justify=tk.CENTER
                ).pack()
                return
                
            # Preparar dados - criar array completo de 24 horas
            receita_por_hora = [0.0] * 24  # 0h √†s 23h
            
            # Preencher com dados reais
            for hora, receita in vendas_horario:
                if 0 <= hora <= 23:
                    receita_por_hora[hora] = float(receita)
            
            horarios = list(range(24))  # 0 a 23
            
            # Criar figura (an√°lise hor√°rios)
            fig = Figure(figsize=(13, 6), facecolor='white')
            ax = fig.add_subplot(1, 1, 1)
            
            # === GR√ÅFICO DE √ÅREA ===
            linha = ax.plot(
                horarios, receita_por_hora, 
                marker='o', 
                linewidth=4, 
                markersize=6,
                color=self.cores['crescimento'],
                markerfacecolor='white',
                markeredgewidth=2,
                label='Receita por Hora'
            )
            
            # √Årea preenchida
            ax.fill_between(
                horarios, receita_por_hora, 
                alpha=0.3, 
                color=self.cores['crescimento']
            )
            
            # Destacar hor√°rios de pico (se receita > m√©dia)
            receita_media = sum(receita_por_hora) / len(receita_por_hora) if receita_por_hora else 0
            for i, receita in enumerate(receita_por_hora):
                if receita > receita_media and receita > 0:
                    ax.plot(i, receita, 'o', markersize=12, color='red', alpha=0.7)
                    ax.annotate(
                        f'PICO\nR$ {receita:.0f}', 
                        (i, receita),
                        textcoords="offset points",
                        xytext=(0,20),
                        ha='center',
                        fontsize=8,
                        fontweight='bold',
                        bbox=dict(boxstyle="round,pad=0.3", facecolor='yellow', alpha=0.7)
                    )
            
            # Configura√ß√µes do gr√°fico
            ax.set_title('üïê An√°lise de Vendas por Hor√°rio do Dia', fontsize=16, fontweight='bold', pad=20)
            ax.set_xlabel('Hor√°rio do Dia', fontsize=12)
            ax.set_ylabel('Receita (R$)', fontsize=12)
            ax.grid(True, alpha=0.3, linestyle='--')
            ax.set_facecolor('#f8f9fa')
            
            # Configurar eixo X (hor√°rios)
            ax.set_xticks(range(0, 24, 2))  # De 2 em 2 horas
            ax.set_xticklabels([f"{h:02d}h" for h in range(0, 24, 2)])
            
            # Adicionar linha da m√©dia
            if receita_media > 0:
                ax.axhline(
                    y=receita_media, 
                    color='orange', 
                    linestyle='--', 
                    alpha=0.8,
                    label=f'M√©dia: R$ {receita_media:.2f}'
                )
            
            # Legenda
            ax.legend(loc='upper right', fontsize=10)
            
            # Melhorar formata√ß√£o
            ax.tick_params(axis='both', labelsize=10)
            for spine in ax.spines.values():
                spine.set_linewidth(0.5)
            
            # Ajustar layout
            fig.tight_layout(pad=3.0)
            
            # Adicionar ao tkinter
            canvas = FigureCanvasTkAgg(fig, self.tab_horarios)
            canvas.draw()
            canvas.get_tk_widget().pack(fill=tk.BOTH, expand=True)
            
            print("‚úÖ Gr√°fico de an√°lise por hor√°rios criado")
            
        except Exception as e:
            print(f"‚ùå Erro ao criar gr√°fico de hor√°rios: {e}")
            # Mostrar erro na interface
            error_frame = ttk.Frame(self.tab_horarios)
            error_frame.pack(expand=True, fill=tk.BOTH)
            
            ttk.Label(
                error_frame, 
                text="‚ùå Erro ao carregar gr√°fico de hor√°rios",
                font=("Arial", 12, "bold")
            ).pack(pady=20)
    
    def criar_grafico_comparacao_mensal(self):
        """
        üìÖ GR√ÅFICO DE EVOLU√á√ÉO MENSAL
        
        Este gr√°fico mostra como o neg√≥cio est√° evoluindo ao longo dos meses.
        Fundamental para:
        - Acompanhar crescimento do neg√≥cio
        - Identificar sazonalidades
        - Comparar performance entre meses
        - Projetar tend√™ncias futuras
        
        DADOS MOSTRADOS:
        - Receita mensal dos √∫ltimos 6 meses
        - Linha de tend√™ncia
        - Percentual de crescimento
        - Metas e compara√ß√µes
        
        INTERPRETA√á√ÉO PARA O NEG√ìCIO:
        - Linha ascendente = neg√≥cio crescendo
        - Linha descendente = precisa a√ß√£o corretiva
        - Varia√ß√µes = sazonalidade ou eventos espec√≠ficos
        """
        try:
            print("üìÖ Criando gr√°fico de evolu√ß√£o mensal...")
            
            # Limpar aba
            for widget in self.tab_comparacao.winfo_children():
                widget.destroy()
                
            # Calcular dados dos √∫ltimos 6 meses
            dados_mensais = []
            hoje = datetime.now()
            
            for i in range(6):
                # Calcular m√™s
                mes_atual = hoje.replace(day=1) - timedelta(days=30*i)
                inicio_mes = mes_atual.strftime("%d/%m/%Y")
                
                # √öltimo dia do m√™s
                if mes_atual.month == 12:
                    fim_mes = mes_atual.replace(year=mes_atual.year + 1, month=1, day=1) - timedelta(days=1)
                else:
                    fim_mes = mes_atual.replace(month=mes_atual.month + 1, day=1) - timedelta(days=1)
                fim_mes_str = fim_mes.strftime("%d/%m/%Y")
                
                # Buscar receita do m√™s
                receita_mes = self.db.obter_receita_periodo(inicio_mes, fim_mes_str)
                vendas_mes = self.db.contar_vendas_periodo(inicio_mes, fim_mes_str)
                
                dados_mensais.append({
                    'mes': mes_atual.strftime("%m/%Y"),
                    'receita': receita_mes,
                    'vendas': vendas_mes
                })
            
            # Inverter para ordem cronol√≥gica
            dados_mensais = dados_mensais[::-1]
            
            if not any(d['receita'] > 0 for d in dados_mensais):
                # Se n√£o h√° dados, mostrar mensagem
                no_data_frame = ttk.Frame(self.tab_comparacao)
                no_data_frame.pack(expand=True, fill=tk.BOTH)
                
                ttk.Label(
                    no_data_frame, 
                    text="üìÖ Dados insuficientes para an√°lise mensal",
                    font=("Arial", 14, "bold")
                ).pack(pady=50)
                
                ttk.Label(
                    no_data_frame,
                    text="Este gr√°fico mostrar√° a evolu√ß√£o do neg√≥cio\nquando houver dados de m√∫ltiplos meses.",
                    font=("Arial", 11),
                    justify=tk.CENTER
                ).pack()
                return
                
            # Preparar dados para gr√°fico
            meses = [d['mes'] for d in dados_mensais]
            receitas = [d['receita'] for d in dados_mensais]
            vendas = [d['vendas'] for d in dados_mensais]
            
            # Criar figura (evolu√ß√£o mensal)
            fig = Figure(figsize=(13, 7), facecolor='white')
            
            # === GR√ÅFICO 1: RECEITA MENSAL ===
            ax1 = fig.add_subplot(2, 1, 1)
            
            # Gr√°fico de barras para receita
            bars = ax1.bar(
                meses, receitas, 
                color=self.cores['receita'],
                alpha=0.8,
                edgecolor='white',
                linewidth=2,
                label='Receita Mensal'
            )
            
            # Linha de tend√™ncia
            if len(receitas) > 1:
                ax1.plot(
                    meses, receitas, 
                    color='red', 
                    linewidth=3, 
                    marker='o', 
                    markersize=8,
                    label='Tend√™ncia'
                )
            
            ax1.set_title('üí∞ Evolu√ß√£o da Receita Mensal', fontsize=14, fontweight='bold', pad=20)
            ax1.set_ylabel('Receita (R$)', fontsize=12)
            ax1.grid(True, alpha=0.3, linestyle='--')
            ax1.set_facecolor('#f8f9fa')
            ax1.legend()
            
            # Adicionar valores nas barras
            for bar, valor in zip(bars, receitas):
                altura = bar.get_height()
                ax1.text(
                    bar.get_x() + bar.get_width()/2., 
                    altura + max(receitas) * 0.01,
                    f'R$ {valor:.0f}',
                    ha='center', 
                    va='bottom',
                    fontsize=10,
                    fontweight='bold'
                )
            
            # === GR√ÅFICO 2: N√öMERO DE VENDAS MENSAIS ===
            ax2 = fig.add_subplot(2, 1, 2)
            
            # Gr√°fico de linha para vendas
            ax2.plot(
                meses, vendas, 
                marker='s', 
                linewidth=4, 
                markersize=8,
                color=self.cores['vendas'],
                markerfacecolor='white',
                markeredgewidth=2,
                label='Vendas Mensais'
            )
            
            # √Årea preenchida
            ax2.fill_between(
                meses, vendas, 
                alpha=0.3, 
                color=self.cores['vendas']
            )
            
            ax2.set_title('üõí Evolu√ß√£o do N√∫mero de Vendas', fontsize=14, fontweight='bold', pad=20)
            ax2.set_ylabel('N√∫mero de Vendas', fontsize=12)
            ax2.set_xlabel('M√™s/Ano', fontsize=12)
            ax2.grid(True, alpha=0.3, linestyle='--')
            ax2.set_facecolor('#f8f9fa')
            ax2.legend()
            
            # Adicionar valores nos pontos
            for i, (mes, venda) in enumerate(zip(meses, vendas)):
                ax2.annotate(
                    f'{int(venda)}', 
                    (i, venda),
                    textcoords="offset points",
                    xytext=(0,15),
                    ha='center',
                    fontsize=10,
                    fontweight='bold'
                )
            
            # Calcular e mostrar crescimento
            if len(receitas) >= 2:
                crescimento = ((receitas[-1] - receitas[-2]) / receitas[-2]) * 100 if receitas[-2] > 0 else 0
                cor_crescimento = 'green' if crescimento >= 0 else 'red'
                sinal = '+' if crescimento >= 0 else ''
                
                # Adicionar texto de crescimento
                fig.suptitle(
                    f'Crescimento √∫ltimo m√™s: {sinal}{crescimento:.1f}%',
                    fontsize=12,
                    color=cor_crescimento,
                    y=0.02
                )
            
            # Melhorar formata√ß√£o
            for ax in [ax1, ax2]:
                ax.tick_params(axis='x', rotation=45, labelsize=10)
                ax.tick_params(axis='y', labelsize=10)
                for spine in ax.spines.values():
                    spine.set_linewidth(0.5)
            
            # Ajustar layout
            fig.tight_layout(pad=3.0)
            
            # Adicionar ao tkinter
            canvas = FigureCanvasTkAgg(fig, self.tab_comparacao)
            canvas.draw()
            canvas.get_tk_widget().pack(fill=tk.BOTH, expand=True)
            
            print("‚úÖ Gr√°fico de evolu√ß√£o mensal criado")
            
        except Exception as e:
            print(f"‚ùå Erro ao criar gr√°fico mensal: {e}")
            # Mostrar erro na interface
            error_frame = ttk.Frame(self.tab_comparacao)
            error_frame.pack(expand=True, fill=tk.BOTH)
            
            ttk.Label(
                error_frame, 
                text="‚ùå Erro ao carregar gr√°fico mensal",
                font=("Arial", 12, "bold")
            ).pack(pady=20)
    
    def mostrar_ajuda(self):
        """
        ‚ùì JANELA DE AJUDA PARA O USU√ÅRIO
        
        Cria uma janela com explica√ß√µes detalhadas sobre como usar
        o dashboard e interpretar os dados mostrados.
        
        CONTE√öDO DA AJUDA:
        1. Como navegar no dashboard
        2. O que cada m√©trica significa
        3. Como interpretar os gr√°ficos
        4. Dicas para usar as informa√ß√µes no neg√≥cio
        """
        ajuda_window = tk.Toplevel(self.window)
        ajuda_window.title("üí° Como Usar o Dashboard")
        ajuda_window.geometry("800x600")
        centralizar_janela(ajuda_window)
        
        # Criar scrollable text
        frame_main = ttk.Frame(ajuda_window)
        frame_main.pack(fill=tk.BOTH, expand=True, padx=20, pady=20)
        
        # T√≠tulo
        ttk.Label(
            frame_main,
            text="üí° Guia Completo do Dashboard Financeiro",
            font=("Arial", 16, "bold")
        ).pack(pady=(0, 20))
        
        # Texto de ajuda
        ajuda_text = tk.Text(
            frame_main,
            wrap=tk.WORD,
            font=("Arial", 11),
            padx=10,
            pady=10
        )
        ajuda_text.pack(fill=tk.BOTH, expand=True)
        
        # Scrollbar
        scrollbar = ttk.Scrollbar(ajuda_text)
        scrollbar.pack(side=tk.RIGHT, fill=tk.Y)
        ajuda_text.config(yscrollcommand=scrollbar.set)
        scrollbar.config(command=ajuda_text.yview)
        
        conteudo_ajuda = """
üìä DASHBOARD FINANCEIRO - GUIA COMPLETO

Este dashboard foi criado para ajudar voc√™ a entender e controlar sua lanchonete de forma profissional.

‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

üìã M√âTRICAS PRINCIPAIS

üí∞ Receita Hoje: Quanto dinheiro voc√™ faturou hoje
üõí Vendas Hoje: Quantas vendas foram feitas hoje  
üèÜ Produto Top: Qual produto est√° vendendo mais hoje
üéØ Ticket M√©dio: Valor m√©dio de cada venda (receita √∑ vendas)
üì¶ Valor Estoque: Quanto vale todo seu estoque atual
‚ö†Ô∏è Estoque Baixo: Quantos produtos est√£o acabando (menos de 5 unidades)
üìÖ Receita M√™s: Total faturado no m√™s atual
üìà Crescimento: Compara√ß√£o com a semana passada

‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

üìà GR√ÅFICOS E AN√ÅLISES

üìä VENDAS DI√ÅRIAS
- Mostra receita e quantidade dos √∫ltimos 7 dias
- Use para: identificar dias da semana que vendem mais
- Dica: se um dia vende menos, fa√ßa promo√ß√µes especiais

üèÜ TOP PRODUTOS  
- Ranking dos produtos que mais vendem
- Use para: focar nos produtos que o cliente mais gosta
- Dica: mantenha sempre em estoque os produtos do topo

üïê HOR√ÅRIOS DE PICO
- Mostra quais hor√°rios vendem mais
- Use para: escalar funcion√°rios nos hor√°rios certos
- Dica: prepare mais estoque antes dos hor√°rios de pico

üìÖ EVOLU√á√ÉO MENSAL
- Compara receita dos √∫ltimos meses
- Use para: acompanhar crescimento do neg√≥cio
- Dica: linha subindo = neg√≥cio crescendo, linha descendo = revisar estrat√©gia

‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

üö® ALERTAS E O QUE FAZER

‚ö†Ô∏è Estoque Baixo: Compre mais produtos antes que acabem
üì¢ Sem Vendas: Verifique se est√° registrando as vendas no sistema
üéâ Muitas Vendas: √ìtimo! Continue fazendo o que est√° dando certo
üí∞ Boa Receita: Dia produtivo, mantenha o padr√£o
üî• Produto em Alta: Produto vendendo muito, n√£o deixe faltar

‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

üí° DICAS PARA USAR NO SEU NEG√ìCIO

1. HOR√ÅRIOS DE PICO
   - Tenha mais funcion√°rios nos hor√°rios que mais vendem
   - Prepare ingredientes antes dos picos
   - Evite fazer limpeza pesada nos hor√°rios de movimento

2. PRODUTOS CAMPE√ïES
   - Sempre tenha em estoque os produtos do top 10
   - Considere aumentar a margem dos produtos que vendem muito
   - Use os campe√µes para atrair clientes (combos, promo√ß√µes)

3. DIAS DA SEMANA
   - Fa√ßa promo√ß√µes nos dias que vendem menos
   - Programe limpeza e manuten√ß√£o nos dias mais fracos
   - Ajuste compras baseado no padr√£o semanal

4. CRESCIMENTO MENSAL
   - Se crescendo: continue a estrat√©gia atual
   - Se est√°vel: teste novas promo√ß√µes ou produtos
   - Se caindo: revisar pre√ßos, qualidade, atendimento

5. TICKET M√âDIO
   - Se baixo: ofere√ßa combos e adicionais
   - Se alto: mantenha a qualidade que justifica o pre√ßo
   - Meta: sempre buscar aumentar sem perder clientes

‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

üîÑ ATUALIZANDO OS DADOS

‚Ä¢ Clique em "üîÑ Atualizar Dados" para buscar informa√ß√µes mais recentes
‚Ä¢ O dashboard mostra a √∫ltima atualiza√ß√£o no canto superior direito
‚Ä¢ Dados s√£o calculados em tempo real a partir das vendas registradas
‚Ä¢ Para dados precisos, sempre registre vendas no momento que acontecem

‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

‚ùì D√öVIDAS FREQUENTES

P: Por que alguns gr√°ficos est√£o vazios?
R: Precisa ter vendas registradas no sistema. Comece registrando vendas!

P: Os valores est√£o corretos?
R: Os valores v√™m das vendas registradas. Sempre registre pre√ßo e quantidade.

P: Como interpretar o crescimento?
R: + significa crescendo, - significa diminuindo comparado √† semana passada.

P: O que fazer se estoque baixo?
R: Comprar mais produtos antes que acabem e percam vendas.

P: Como usar o hor√°rio de pico?
R: Tenha mais funcion√°rios e estoque preparado nesses hor√°rios.

‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

üéØ LEMBRE-SE

Este dashboard √© sua ferramenta de gest√£o profissional. Use os dados para:
‚úì Tomar decis√µes baseadas em fatos, n√£o intui√ß√£o
‚úì Identificar oportunidades de crescimento  
‚úì Evitar problemas antes que aconte√ßam
‚úì Maximizar seus lucros de forma inteligente

Sucesso no seu neg√≥cio! üöÄ
        """
        
        ajuda_text.insert(1.0, conteudo_ajuda)
        ajuda_text.config(state=tk.DISABLED)  # Read-only
        
        # Bot√£o fechar
        ttk.Button(
            frame_main,
            text="Fechar",
            command=ajuda_window.destroy
        ).pack(pady=(10, 0))
    
    def exportar_relatorio(self):
        """
        üìÑ EXPORTA√á√ÉO DE RELAT√ìRIO COMPLETO
        
        Gera um arquivo Excel com todos os dados do dashboard
        para an√°lise offline ou envio para contador/s√≥cios.
        
        CONTE√öDO DO RELAT√ìRIO:
        1. Resumo executivo com m√©tricas principais
        2. Dados de vendas detalhados
        3. An√°lise de produtos
        4. Estat√≠sticas por per√≠odo
        
        ARQUIVO GERADO:
        - Formato Excel (.xlsx)
        - M√∫ltiplas abas organizadas
        - Dados formatados e leg√≠veis
        - Salvo na pasta 'data/relatorios/'
        """
        try:
            print("üìÑ Gerando relat√≥rio completo...")
            
            # Importar pandas para exporta√ß√£o
            import pandas as pd
            from datetime import datetime
            import os
            
            # Criar pasta de relat√≥rios se n√£o existir
            os.makedirs("data/relatorios", exist_ok=True)
            
            # Nome do arquivo com timestamp
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            filename = f"data/relatorios/dashboard_relatorio_{timestamp}.xlsx"
            
            # Criar writer do Excel
            with pd.ExcelWriter(filename, engine='openpyxl') as writer:
                
                # === ABA 1: RESUMO EXECUTIVO ===
                hoje = datetime.now().strftime("%d/%m/%Y")
                receita_hoje = self.db.obter_receita_periodo(hoje, hoje)
                vendas_hoje = self.db.contar_vendas_periodo(hoje, hoje)
                produto_top = self.db.obter_produto_mais_vendido()
                estoque_total = self.db.obter_valor_total_estoque()
                produtos_baixo = self.db.contar_produtos_estoque_baixo(5)
                
                resumo_data = {
                    'M√©trica': [
                        'Receita Hoje', 'Vendas Hoje', 'Produto Mais Vendido',
                        'Ticket M√©dio', 'Valor Estoque Total', 'Produtos Estoque Baixo'
                    ],
                    'Valor': [
                        f'R$ {receita_hoje:.2f}',
                        vendas_hoje,
                        produto_top,
                        f'R$ {(receita_hoje/vendas_hoje if vendas_hoje > 0 else 0):.2f}',
                        f'R$ {estoque_total:.2f}',
                        produtos_baixo
                    ]
                }
                
                df_resumo = pd.DataFrame(resumo_data)
                df_resumo.to_excel(writer, sheet_name='Resumo Executivo', index=False)
                
                # === ABA 2: VENDAS DOS √öLTIMOS 7 DIAS ===
                dados_vendas = self.db.obter_vendas_ultimos_dias(7)
                if dados_vendas:
                    df_vendas = pd.DataFrame(dados_vendas, columns=['Data', 'Receita', 'Quantidade'])
                    df_vendas.to_excel(writer, sheet_name='Vendas 7 Dias', index=False)
                
                # === ABA 3: TOP PRODUTOS ===
                produtos_performance = self.db.obter_top_produtos_receita(20)
                if produtos_performance:
                    df_produtos = pd.DataFrame(produtos_performance, columns=['Produto', 'Receita Total', 'Quantidade Total'])
                    df_produtos.to_excel(writer, sheet_name='Top Produtos', index=False)
                
                # === ABA 4: HIST√ìRICO COMPLETO ===
                historico_completo = self.db.listar_historico_completo(100)  # √öltimas 100 vendas
                if historico_completo:
                    df_historico = pd.DataFrame(
                        historico_completo, 
                        columns=['ID', 'Produto', 'Quantidade', 'Pre√ßo Unit.', 'Total', 'Data/Hora', 'Vendedor', 'Obs.']
                    )
                    df_historico.to_excel(writer, sheet_name='Hist√≥rico Vendas', index=False)
                
                # === ABA 5: ESTOQUE ATUAL ===
                estoque_completo = self.db.listar_estoque_completo()
                if estoque_completo:
                    df_estoque = pd.DataFrame(
                        estoque_completo,
                        columns=['Produto', 'Quantidade', 'Pre√ßo', 'Categoria', 'C√≥digo', 'Cadastro', 'Atualiza√ß√£o']
                    )
                    df_estoque.to_excel(writer, sheet_name='Estoque Atual', index=False)
            
            # Sucesso
            messagebox.showinfo(
                "Relat√≥rio Exportado",
                f"Relat√≥rio salvo com sucesso!\n\nArquivo: {filename}\n\n"
                f"O arquivo cont√©m:\n"
                f"‚Ä¢ Resumo executivo\n"
                f"‚Ä¢ Dados de vendas\n" 
                f"‚Ä¢ Performance dos produtos\n"
                f"‚Ä¢ Hist√≥rico detalhado\n"
                f"‚Ä¢ Situa√ß√£o do estoque\n\n"
                f"Use este relat√≥rio para an√°lises ou envio ao contador."
            )
            
            print(f"‚úÖ Relat√≥rio exportado para: {filename}")
            
        except Exception as e:
            print(f"‚ùå Erro ao exportar relat√≥rio: {e}")
            messagebox.showerror(
                "Erro na Exporta√ß√£o", 
                f"N√£o foi poss√≠vel gerar o relat√≥rio.\n\nErro: {str(e)}\n\n"
                f"Verifique se voc√™ tem permiss√£o para escrever na pasta 'data/relatorios/'."
            )
            
    def exportar_relatorio(self):
        """Exporta relat√≥rio executivo"""
        try:
            from src.relatorios.relatorio_executivo import RelatorioExecutivo
            relatorio = RelatorioExecutivo()
            arquivo = relatorio.gerar_relatorio_completo()
            
            if arquivo:
                messagebox.showinfo(
                    "Sucesso", 
                    f"Relat√≥rio executivo exportado:\n{arquivo}"
                )
            else:
                messagebox.showerror("Erro", "Falha ao exportar relat√≥rio")
                
        except Exception as e:
            messagebox.showerror("Erro", f"Erro ao exportar: {str(e)}")